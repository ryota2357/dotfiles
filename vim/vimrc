set nocompatible
filetype plugin indent on
syntax enable

set encoding=utf8
scriptencoding utf8
set fileencodings=utf-8,ucs-boms,euc-jp,ep932
set fileformat=unix
set fileformats=unix,dos,mac

" jetpack
if executable('git')
  let g:jetpack_download_method = 'git'
else
  let g:jetpack_download_method = 'curl'
endif
let s:jetpackfile = expand('~/.vim/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim')
let s:jetpackurl = "https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim"
if !filereadable(s:jetpackfile)
  call system(printf('curl -fsSLo %s --create-dirs %s', s:jetpackfile, s:jetpackurl))
endif

" カーソルの形
if has('vim_starting')
  let &t_SI .= "\e[6 q"
  let &t_EI .= "\e[2 q"
  let &t_SR .= "\e[4 q"
endif

" 日本語ヘルプを優先
set helplang=ja,en

" 曖昧文字幅の幅を1に
set ambiwidth=single

" BOMを消す
set nobomb

" 編集中のファイルが他で書き換えられたら自動で読み直す
set autoread

" ヤンクをクリップボードへ繋ぐ
set clipboard+=unnamed

" ビープ音を消す
set belloff=all

" スワップファイルを生成しない
set noswapfile

" true color
set termguicolors

" 保存するコマンド履歴の数
set history=1000

" モードのメッセージをコマンドラインに表示しない
set noshowmode

" 現在行のハイライトを有効
set cursorline

" インクリメンタル検索を有効
set incsearch

" マウスを有効に
set mouse=a

" 行末の1文字先までカーソルを移動可能に
set virtualedit=onemore

" カーソル移動の行等行末の扱い
set whichwrap=b,s,<,>,~,[,]

" インサートモードでの<BS>, <Del>の扱い
set backspace=indent,eol,start

" どこでも短形ビジュアルモード
set virtualedit=block

" 行の折り返しを無効に
set nowrap

" 画面の左右の端でスクロールが発生した場合、何文字ずつスクロールするか
set sidescroll=1

" 表示文字設定
set list
set listchars=extends:,precedes:,space:⋅,tab:——>

" 全角カッコペアの追加
set matchpairs+=（:）,「:」,『:』,【:】,［:］,＜:＞

" スクロールの余裕
set scrolloff=3
set sidescrolloff=5

" インデント設定
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set smartindent

" 検索パターンにおいて大文字と小文字を区別しない
set ignorecase

" マーカー位置で折りたたむ
set foldmethod=marker

" コマンド定義
command! -nargs=1 -complete=help Vh :vertical belowright help <args>
command! Wrap setlocal wrap!
command! FixWhitespace silent! keepjumps execute ':%s/\\\@<!\s\+$//'

function! s:keycode(keys) abort
  return substitute(a:keys, '<[^>]*>', '\=eval(''"\'' .. submatch(0) .. ''"'')', 'g')
endfunction

" <Leader>、`'`で囲うとダメみたい
let mapleader = "\<Space>"

" xで削除した時はヤンクしない
xnoremap x "_x
nnoremap x "_x

" ビジュアルで選択したテキストにペースト上書きするときにヤンクしない
" `P`だとカーソル移動しないからダメ
xnoremap p pgvy

" インデントを考慮したインサート
nnoremap <expr> i len(getline('.')) !=# 0 ? 'i' : '"_cc'
nnoremap <expr> a len(getline('.')) !=# 0 ? 'a' : '"_cc'
nnoremap <expr> A len(getline('.')) !=# 0 ? 'A' : '"_cc'
nnoremap <expr> I len(getline('.')) !=# 0 ? 'I' : '"_cc'

" 表示行で移動する
nnoremap j gj
nnoremap k gk
nnoremap <Up> g<Up>
nnoremap <Down> g<Down>

" 行頭行末移動
for mode in ['n', 'x']
  execute mode .. 'noremap 0 ^'
  execute mode .. 'noremap ^ 0'
  execute mode .. 'noremap + $'
endfor

" ペア移動
nnoremap ] %

" ノーマルモードでも改行
nnoremap <CR> i<CR><ESC>

" 行選択モードで左右に動いたらビジュアルモードを抜ける
xnoremap <expr> h mode() ==# 'V' ? '<Esc>h' : 'h'
xnoremap <expr> l mode() ==# 'V' ? '<Esc>l' : 'l'

" 行選択モードでShift押したままjk押すことあるので
xnoremap J j
xnoremap K k

" 選択行のインデントをTabでもできるように
xnoremap <Tab> >
xnoremap <S-Tab> <

" :q のタイポ修正
nnoremap q: :q
nnoremap <Leader>: q:

" emacsキーバインド
for key in [['b', '<C-G>U<Left>'],
         \  ['f', '<C-G>U<Right>'],
         \  ['p', '<Up>'],
         \  ['n', '<Down>'],
         \  ['a', '<Home>'],
         \  ['e', '<End>'],
         \  ['d', '<Del>'],
         \  ['h', '<BS>'],
         \  ['k', '<Cmd>normal! "_D<CR><End>']]
    execute 'inoremap <C-' .. key[0] .. '> ' .. key[1]
    execute 'cnoremap <C-' .. key[0] .. '> ' .. key[1]
endfor

" めっちゃ誤爆させるので
nnoremap <C-f> <Nop>

" 画面分割/移動
nnoremap ss <Cmd>sp<CR><C-w>j
nnoremap sv <Cmd>vs<CR><C-w>l

" ウィンドウサイズの変更
nmap <Plug>(window-resize-mode) <Nop>
function! s:has_edge(direct) abort
  if a:direct ==# 'left'
    return winnr('h') != winnr()
  elseif a:direct ==# 'down'
    return winnr('j') != winnr()
  elseif a:direct ==# 'up'
    return winnr('k') != winnr()
  elseif a:direct ==# 'right'
    return winnr('l') != winnr()
  endif
  echoerr 'invalid direct'
  return false
endfunction
function! s:win_resize_count_cmd_with_update(direct, count1) abort
  let l:signs = #{ left: '-', down: '+', up: '-', right: '+' }
  if s:has_edge('left') && !s:has_edge('right')
    let l:signs['left'] = '+'
    let l:signs['right'] = '-'
  endif
  if s:has_edge('up') && !s:has_edge('down')
    let l:signs['up'] = '+'
    let l:signs['down'] = '-'
  endif
  let s:win_resize_cmd_dict = #{
      \ left:  s:keycode('<Cmd>vertical resize ' .. l:signs['left'] .. '1<CR>'),
      \ right: s:keycode('<Cmd>vertical resize ' .. l:signs['right'] .. '1<CR>'),
      \ down:  s:keycode('<Cmd>resize ' .. l:signs['down'] .. '1<CR>'),
      \ up:    s:keycode('<Cmd>resize ' .. l:signs['up'] .. '1<CR>'),
      \ }
  if a:direct ==# 'left' || a:direct ==# 'right'
    return s:keycode('<Cmd>vertical resize ' .. l:signs[a:direct] .. a:count1 .. '<CR>')
  else
    return s:keycode('<Cmd>resize ' .. l:signs[a:direct] .. a:count1 .. '<CR>')
  endif
endfunction
function! s:win_resize_cmd(direct) abort
  return get(s:win_resize_cmd_dict, a:direct, '')
endfunction
nnoremap <expr> <C-w><Down>  <SID>win_resize_count_cmd_with_update('down', v:count1)  .. '<Plug>(window-resize-mode)'
nnoremap <expr> <C-w><Up>    <SID>win_resize_count_cmd_with_update('up', v:count1)    .. '<Plug>(window-resize-mode)'
nnoremap <expr> <C-w><Right> <SID>win_resize_count_cmd_with_update('right', v:count1) .. '<Plug>(window-resize-mode)'
nnoremap <expr> <C-w><Left>  <SID>win_resize_count_cmd_with_update('left', v:count1)  .. '<Plug>(window-resize-mode)'
nnoremap <expr> <Plug>(window-resize-mode)<Down>  <SID>win_resize_cmd('down')  .. '<Plug>(window-resize-mode)'
nnoremap <expr> <Plug>(window-resize-mode)<Up>    <SID>win_resize_cmd('up')    .. '<Plug>(window-resize-mode)'
nnoremap <expr> <Plug>(window-resize-mode)<Right> <SID>win_resize_cmd('right') .. '<Plug>(window-resize-mode)'
nnoremap <expr> <Plug>(window-resize-mode)<Left>  <SID>win_resize_cmd('left')  .. '<Plug>(window-resize-mode)'

" モーション
for motion in [['i2', 'i"'], ['i7', "i'"], ['i8', 'i('], ['i9', 'i)'],
            \  ['a2', '2i"'], ['a7', "2i'"], ['a8', 'a('], ['a9', 'a)'], ['a`', '2i`']]
  execute 'onoremap ' .. motion[0] .. ' ' .. motion[1]
  execute 'xnoremap ' .. motion[0] .. ' ' .. motion[1]
endfor
for motion in ['f', 't', 'F', 'T']
  for char in [['1', '!'], ['2', '"'], ['3', '#'], ['4', '$'], ['5', '%'], ['6', '&'], ['7', "'"], ['8', '('], ['9', ')']]
    for mode in ['n', 'o', 'x']
      execute mode .. 'noremap ' .. motion .. char[0] .. ' ' .. motion .. char[1]
      execute mode .. 'noremap ' .. motion .. char[1] .. ' ' .. motion .. char[0]
    endfor
  endfor
endfor

" タブ移動
nnoremap > <Cmd>tabn<CR>
nnoremap < <Cmd>tabN<CR>

" Karabiner で } と { を入れ替えてるけど、移動は元のキーで。
if has("mac")
  nnoremap { }
  xnoremap { }
  nnoremap } {
  xnoremap } {
endif

" 文字コード入力
inoremap <C-v>u <C-r>=nr2char(0x)<Left>

" プラグイン
packadd vim-jetpack
let g:jetpack_njobs = 1
call jetpack#begin()
Jetpack 'tani/vim-jetpack', {'opt': 1}
Jetpack 'tomasiser/vim-code-dark'
Jetpack 'vim-jp/vimdoc-ja'
Jetpack 'itchyny/lightline.vim'
Jetpack 'christoomey/vim-tmux-navigator'
Jetpack 'ryota2357/necodark', #{ branch: 'build/vim' }
call jetpack#end()

let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-w>h <Cmd>TmuxNavigateLeft<CR>
nnoremap <silent> <C-w>j <Cmd>TmuxNavigateDown<CR>
nnoremap <silent> <C-w>k <Cmd>TmuxNavigateUp<CR>
nnoremap <silent> <C-w>l <Cmd>TmuxNavigateRight<CR>

colorscheme necodark

" execute 'source ' .. expand('~/Projects/CSharp/necodark/build/vim/colors/necodark.vim')

set secure
