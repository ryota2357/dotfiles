[[plugins]]
repo = 'mfussenegger/nvim-dap'
depends = 'nvim-dap-ui'
hook_source = '''
hi DapBreakpointTextHl guifg=#AA0000
hi DapStoppedTextHl guifg=#00c853
lua << EOF
  local dap = require('dap')
  vim.fn.sign_define('DapBreakpoint', { text='', texthl='DapBreakpointTextHl' })
  vim.fn.sign_define('DapStopped', { text='', texthl='DapStoppedTextHl' })
  dap.adapters = {
    codelldb = {
      type = 'server',
      port = '${port}',
      executable = {
        command = vim.fn.stdpath('data') .. '/mason/packages/codelldb/extension/adapter/codelldb',
        args = {'--port', '${port}'}
      }
    },
    debugpy = {
      type = 'executable',
      command = vim.fn.stdpath('data') .. '/mason/packages/debugpy/venv/bin/python',
      args = { '-m', 'debugpy.adapter' }
    }
  }
  dap.configurations = {
    cpp = {
      {
        name = 'Launch file',
        type = 'codelldb',
        request = 'launch',
        program = function()
          return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/a.out', 'file')
        end,
        cwd = '${workspaceFolder}',
        stopOnEntry = false -- trueだとバイナリのデバッグになっちゃう(なんで?)
      }
    },
    python = {
      {
        name = 'Launch file',
        type = 'debugpy',
        request = 'launch',
        program = '${file}',
        pythonPath = vim.fn.fnamemodify('~/.pyenv/shims/python', ':p')
      }
    }
  }
EOF
'''
hook_add = '''
  command! DapBegin call <SID>DapBegin()
  command! DapEnd call <SID>DapEnd()

  function! s:DapBegin() abort
    call dein#source('nvim-dap') " 複数回sourceされることはない
    let b:save_laststatus = &laststatus
    setlocal laststatus=2
    nnoremap <silent><F4>  <Cmd>lua require'dap'.toggle_breakpoint()<CR>
    nnoremap <silent><F5>  <Cmd>lua require'dap'.continue()<CR>
    nnoremap <silent><F10> <Cmd>lua require'dap'.step_over()<CR>
    nnoremap <silent><F11> <Cmd>lua require'dap'.step_into()<CR>
    nnoremap <silent><F12> <Cmd>lua require'dap'.step_out()<CR>
    lua require'dapui'.open()
    nnoremap <buffer><buffer><2-LeftMouse> <Cmd>lua require'dapui'.eval()<CR>
  endfunction

  function! s:DapEnd() abort
    silent! nunmap <F4>
    silent! nunmap <F5>
    silent! nunmap <F10>
    silent! nunmap <F11>
    silent! nunmap <F12>
    silent! nunmap <2-LeftMouse>
    if exists('b:save_laststatus')
      let &laststatus = b:save_laststatus
      unlet b:save_laststatus
    endif
    lua require'dapui'.close()
    lua require'dap'.clear_breakpoints()
    lua require'dap'.disconnect()
  endfunction
'''

[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
on_source = 'nvim-dap'
hook_source = '''
lua << EOF
  require('dapui').setup {
    icons = { expanded = '', collapsed = '' },
    layouts = {
      {
        elements = {
          { id = 'repl', size = 0.15 },
          { id = 'stacks', size = 0.2 },
          { id = 'watches', size = 0.2 },
          { id = 'scopes', size = 0.35 },
          { id = 'breakpoints', size = 0.1 }
        },
        size = 0.4,
        position = 'left'
      },
      {
        elements = { 'console' },
        size = 0.25,
        position = 'bottom'
      }
    }
  }
EOF
'''
