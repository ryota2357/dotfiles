[[plugins]]
repo = 'Shougo/pum.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
hook_add = '''
  inoremap <expr><C-n>  pum#visible() ? pum#map#select_relative(+1) : '<Cmd>normal! gj<CR>'
  inoremap <expr><C-p>  pum#visible() ? pum#map#select_relative(-1) : '<Cmd>normal! gk<CR>'
  inoremap <expr><Down> pum#visible() ? pum#map#select_relative(+1) : '<Cmd>normal! gj<CR>'
  inoremap <expr><Up>   pum#visible() ? pum#map#select_relative(-1) : '<Cmd>normal! gk<CR>'
  inoremap <expr><ESC>  pum#entered() ? pum#map#cancel() : '<ESC>'
  " <CR> は lexima.vim で定義
'''
hook_source = '''
  call pum#set_option({
    \   'padding': v:true,
    \   'scrollbar_char': ''
    \ })
'''

[[plugins]]
repo = 'github/copilot.vim'
on_cmd = 'Copilot'
hook_add = '''
  let g:copilot_node_command = '~/.nodebrew/node/v16.17.0/bin/node'
'''

[[plugins]]
repo = 'cohama/lexima.vim'
rev = 'feature/feedkeys'
depends = 'pum.vim'
on_event = 'InsertEnter'
hook_add = '''
  let g:lexima_no_default_rules = v:true
  let g:lexima_map_escape = ''
  let g:lexima_accept_pum_with_enter = v:false
  autocmd FileType ddu-ff-filter let b:lexima_disabled = v:true
  let g:lexima_custom = [
    \   { 'char': '(', 'input_after': ')', 'except': '\\\%#' },
    \   { 'char': '[', 'input_after': ']', 'except': '\\\%#' },
    \   { 'char': '{', 'input_after': '}', 'except': '\\\%#' },
    \   { 'char': '"', 'input_after': '"', 'except': '\\\%#' },
    \   { 'char': "'", 'input_after': "'", 'except': '\\\%#' },
    \   { 'char': '`', 'input_after': '`', 'except': '\\\%#' },
    \   { 'char': ')', 'at': '(\%#)', 'leave': 1 },
    \   { 'char': ']', 'at': '\%#\]', 'leave': 1 },
    \   { 'char': ';', 'at': '\%#)',  'leave': ')', 'input': ';' },
    \   { 'char': ',', 'input': ', ', 'except': '\%#\n', },
    \   { 'char': '<BS>', 'at': '(\%#)',   'delete': 1 },
    \   { 'char': '<BS>', 'at': '\[\%#\]', 'delete': 1 },
    \   { 'char': '<BS>', 'at': '{\%#}',   'delete': 1 },
    \   { 'char': '<BS>', 'at': '"\%#"',   'delete': 1 },
    \   { 'char': '<BS>', 'at': "'\%#'",   'delete': 1 },
    \   { 'char': '<BS>', 'at': '`\%#`',   'delete': 1 },
    \   { 'char': '<CR>', 'at': '{\%#}',   'input_after': '<CR>' },
    \   { 'char': '<CR>', 'at': '(\%#)',   'input_after': '<CR>' },
    \ ]
  let g:lexima_custom_tex = [
    \   { 'char': '$',    'input_after': '$' },
    \   { 'char': '<BS>', 'at': '\$\%#\$', 'delete': 1 },
    \   { 'char': '<CR>', 'at': '^ *\\item.*\%#', 'input': '<CR>\item ', 'except': '\\\\\%#' },
    \ ]
  let g:lexima_custom_cs = [
    \   { 'char': '<CR>', 'at': ' {\%#}', 'input': '<BS><BS><CR>{<CR>', 'input_after': '<CR>' },
    \   { 'char': '<CR>', 'at': '[^ ]{\%#}', 'input': '<BS><CR>{<CR>', 'input_after': '<CR>' },
    \ ]
  let g:lexima_custom_tag = [
    \   { 'char': '>', 'at': '<\(\w\+\)\%#', 'input_after': '</\1>', 'with_submatch': v:true },
    \   { 'char': '<CR>', 'at': '<\w\+>\%#<\/\w\+>', 'input_after': '<CR>' },
    \ ]
'''
hook_source = '''
  call lexima#clear_rules()
  for rule in g:lexima_custom
    call lexima#add_rule(rule)
  endfor
  for rule in g:lexima_custom_tex
    let rule['filetype'] = 'tex'
    call lexima#add_rule(rule)
  endfor
  for rule in g:lexima_custom_cs
    let rule['filetype'] = 'cs'
    call lexima#add_rule(rule)
  endfor
  for rule in g:lexima_custom_tag
    let rule['filetype'] = ['html', 'typescriptreact']
    call lexima#add_rule(rule)
  endfor
  execute printf("inoremap <expr><silent> <CR> pum#visible() ? pum#map#confirm() : lexima#expand(%s, 'i')",
                \ string(lexima#string#to_mappable('<CR>'))
                \ )
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
on_cmd = 'FuzzyMotion'
hook_add = '''
  let g:fuzzy_motion_labels = [
    \ 'L', 'K', 'J', 'P', 'O', 'I', 'H', 'U', 'F',
    \ 'D', 'S', 'R', 'E', 'W', 'A', 'G', 'T', 'Y',
    \ 'N', 'B', 'M', 'V', 'C', 'Q', 'X', 'Z'
    \ ]
  nnoremap <Leader><Space> <Cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufEnter'
hook_post_update = 'TSUpdate'
lua_source = '''
  require('nvim-treesitter.configs').setup {
    ensure_installed = 'all',
    additional_vim_regex_highlighting = false,

    -- help : ハイライト変になる
    -- tex  : snipet挿入後とかでエラーが出る
    highlight = {
      enable = true,
      disable = { 'help', 'latex', 'tex' },
    },
  }
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
depends = 'nvim-treesitter'
on_event = 'BufEnter'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = 'BufReadPost'
hook_source = '''
  lua require'gitsigns'.setup()
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = 'BufEnter'
lua_add = '''
  require('rc.util').highlight.set {
    IndentBlanklineContextChar = { fg = '#6e6e6e', nocombine = true }
  }
'''
lua_source = '''
  require('indent_blankline').setup {
    show_current_context = true,
  }
'''

[[plugins]]
repo = 'uga-rosa/ccc.nvim'
on_event = 'BufReadPost'
lua_source = '''
  local ccc = require('ccc')
  local mapping = ccc.mapping
  ccc.setup {
    bar_len = 40,
    point_char = '■',
    point_color = '#202020',
    highlighter = { auto_enable = true },
    mappings = {
      ['q'] = mapping.none,
      ['<ESC>'] = mapping.quit,
      ['<Left>'] = mapping.decrease1,
      ['<Right>'] = mapping.increase1
    }
  }
'''

[[plugins]]
repo = 'petertriho/nvim-scrollbar'
on_event = 'WinScrolled'
lua_source = '''
  require('scrollbar').setup {
    handle = { color = '#4B4B4B' }
  }
'''

[[plugins]]
repo = 'nvim-treesitter/playground'
on_cmd = ['TSHighlightCapturesUnderCursor', 'TSPlaygroundToggle']

[[plugins]]
repo = 'cocopon/inspecthi.vim'
on_cmd = 'Inspecthi'

[[plugins]]
repo = 'kat0h/bufpreview.vim'
on_ft = 'markdown'

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_cmd = 'TComment'
hook_add = '''
  let g:tcomment_maps = 0
  vnoremap _ :TComment<CR>
  nnoremap _ <Cmd>TComment<CR>
'''

[[plugins]]
repo = 'skanehira/denops-silicon.vim'
depends = 'denops.vim'
on_cmd = 'Silicon'
hook_add = '''
  let g:silicon_options = {
    \  'font': 'Cica',
    \  'no_line_number': v:false,
    \  'no_round_corner': v:false,
    \  'no_window_controls': v:false,
    \  'background_color': '#303030',
    \  'line_offset': 1,
    \  'line_pad': 2,
    \  'pad_horiz': 80,
    \  'pad_vert': 100,
    \  'shadow_blur_radius': 0,
    \  'shadow_color': '#f6f5f5',
    \  'shadow_offset_x': 0,
    \  'shadow_offset_y': 0,
    \  'tab_width': 4,
    \  'theme': 'GitHub',
    \ }
'''

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'
on_ft = ['markdown', 'typescriptreact']
hook_source = '''
  autocmd BufWritePre *.tsx,*.md PrettierAsync
'''
hook_add = '''
  let g:prettier#config#tab_width = 2
'''

[[plugins]]
repo = 'ryota2357/vim-skim-synctex'
# repo = '~/Projects/VimPlugin/vim-skim-synctex'
depends = 'denops.vim'
on_ft = 'tex'
hook_source = '''
  call synctex#option('readingBar', v:true)
  call synctex#option('autoQuit', v:true)
  call synctex#start()
'''
[plugins.ftplugin]
tex = '''
  nnoremap <buffer> <Leader>s <Cmd>call synctex#forwardSerch()<CR>
'''
