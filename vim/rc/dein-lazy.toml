[[plugins]]
repo = 'Shougo/pum.vim'
rev = 'e92be2e427cd3b39541016eb80f87d43f2919e1c'
on_event = ['InsertEnter', 'CmdlineEnter']
hook_add = '''
  inoremap <expr><C-n>  pum#visible() ? pum#map#select_relative(+1, "empty") : '<Cmd>normal! gj<CR>'
  inoremap <expr><C-p>  pum#visible() ? pum#map#select_relative(-1, "empty") : '<Cmd>normal! gk<CR>'
  inoremap <expr><Down> pum#visible() ? pum#map#select_relative(+1, "empty") : '<Cmd>normal! gj<CR>'
  inoremap <expr><Up>   pum#visible() ? pum#map#select_relative(-1, "empty") : '<Cmd>normal! gk<CR>'
  " <CR> は lexima.vim で定義
'''
hook_source = '''
  call pum#set_option(#{
    \   auto_select: v:true,
    \   scrollbar_char: '',
    \ })
  call pum#set_local_option('c', #{
    \   padding: v:true,
    \   auto_select: v:false,
    \   reversed: v:true
    \ })
'''

#[[plugins]]
#repo = 'rcarriga/nvim-notify'
#on_lua = 'notify'
#lua_add = '''
#    vim.notify = function(...)
#        vim.notify = require('notify')
#        vim.notify.setup {
#            level = 0
#        }
#        vim.notify(...)
#    end
#'''

[[plugins]]
repo = 'stevearc/oil.nvim'
on_cmd = 'Oil'
lua_source = '''
    require('oil').setup {
        delete_to_trash = true,
        view_options = {
            show_hidden = true,
            is_hidden_file = function(name, _bufnr)
              return vim.startswith(name, ".")
            end,
            is_always_hidden = function(name, _bufnr)
              return name == '.DS_Store'
            end,
        }
    }
'''

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
on_source = 'oil.nvim'

[[plugins]]
repo = 'github/copilot.vim'
on_cmd = 'Copilot'

[[plugins]]
repo = 'cohama/lexima.vim'
rev = 'feature/feedkeys'
depends = 'pum.vim'
on_event = 'InsertEnter'
hook_add = '''
  let g:lexima_no_default_rules = v:true
  let g:lexima_map_escape = ''
  let g:lexima_accept_pum_with_enter = v:false
  autocmd FileType ddu-ff-filter let b:lexima_disabled = v:true
'''
lua_source = '''
    vim.fn['lexima#clear_rules']()

    for _, rule in ipairs({
        { char = [=[(]=],    input_after = [=[)]=], except = [=[\\\%#]=] },
        { char = [=[[]=],    input_after = [=[]]=], except = [=[\\\%#]=] },
        { char = [=[{]=],    input_after = [=[}]=], except = [=[\\\%#]=] },
        { char = [=["]=],    input_after = [=["]=], except = [=[\\\%#]=] },
        { char = [=[']=],    input_after = [=[']=], except = [=[\(\\\|<\|&\)\%#]=] },
        { char = [=[`]=],    input_after = [=[`]=], except = [=[\\\%#]=] },
        { char = [=[)]=],    at = [=[(\%#)]=],      leave = 1 },
        { char = [=[]]=],    at = [=[\%#\]]=],      leave = 1 },
        { char = [=[,]=],    input = [=[, ]=] },
        { char = [=[<BS>]=], at = [=[(\%#)]=],      delete = 1 },
        { char = [=[<BS>]=], at = [=[\[\%#\]]=],    delete = 1 },
        { char = [=[<BS>]=], at = [=[{\%#}]=],      delete = 1 },
        { char = [=[<BS>]=], at = [=["\%#"]=],      delete = 1 },
        { char = [=[<BS>]=], at = [=['\%#']=],      delete = 1 },
        { char = [=[<BS>]=], at = [=[`\%#`]=],      delete = 1 },
        { char = [=[<CR>]=], at = [=[{\%#}]=],      input_after = [=[<CR>]=] },
        { char = [=[<CR>]=], at = [=[(\%#)]=],      input_after = [=[<CR>]=] },
        { char = [=[<CR>]=], at = [=[, \%#]=],      input = [=[<BS><CR>]=] }
    }) do
        vim.fn['lexima#add_rule'](rule)
    end

    for filetype, rules in pairs({
        tex = {
            { char = [=[$]=],    input_after = [=[$]=],     except = [=[\\\%#]=] },
            { char = [=[<BS>]=], at = [=[\$\%#\$]=],        delete = 1 },
            { char = [=[<CR>]=], at = [=[^ *\\item.*\%#]=], input = [=[<CR>\item ]=], except = [=[\\\\\%#]=] },
        },
        typst = {
            { char = [=[$]=],    input_after = [=[$]=], except = [=[\\\%#]=] },
            { char = [=[<BS>]=], at = [=[\$\%#\$]=],    delete = 1 },
        },
        cs = {
            { char = [=[<CR>]=], at = [=[ {\%#}]=],    input = [=[<BS><BS><CR>{<CR>]=], input_after = [=[<CR>]=] },
            { char = [=[<CR>]=], at = [=[[^ ]{\%#}]=], input = [=[<BS><CR>{<CR>]=],     input_after = [=[<CR>]=] },
        },
        typescriptreact = {
            { char = [=[>]=],    at = [=[<\(\w\+\)\%#]=],      input_after = [=[</\1>]=], with_submatch = true },
            { char = [=[<CR>]=], at = [=[<\w\+>\%#<\/\w\+>]=], input_after = [=[<CR>]=] },
        },
        pdf = {
            { char = [=[<]=],    at = [=[<\%#]=],    input_after = [=[>>]=] },
            { char = [=[<CR>]=], at = [=[<<\%#>>]=], input_after = [=[<CR>]=] }
        },
        rust = {
            { char = [=[<Bar>]=], input_after = [=[<Bar>]=], except = [=[\\\%#]=] }
        }
    }) do
        for _, rule in ipairs(rules) do
            rule.filetype = filetype
            vim.fn['lexima#add_rule'](rule)
        end
    end
    vim.cmd [[
      execute printf("inoremap <expr><silent> <CR> pum#visible() ? pum#map#confirm() : lexima#expand(%s, 'i')",
                    \ string(lexima#string#to_mappable('<CR>'))
                    \ )
    ]]
'''

[[plugins]]
repo = 'monaqa/dial.nvim'
on_map = { nv = ['<Plug>', 'g<Plug>'] }
hook_add = '''
  nnoremap  <C-a>  <Plug>(dial-increment)
  nnoremap  <C-x>  <Plug>(dial-decrement)
  vnoremap  <C-a>  <Plug>(dial-increment)
  vnoremap  <C-x>  <Plug>(dial-decrement)
  nmap g<C-a> g<Plug>(dial-increment)
  nmap g<C-x> g<Plug>(dial-decrement)
  vmap g<C-a> g<Plug>(dial-increment)
  vmap g<C-x> g<Plug>(dial-decrement)
'''
lua_source = '''
local augend = require("dial.augend")
require("dial.config").augends:register_group({
    default = {
		augend.integer.alias.decimal,
		augend.integer.alias.hex,
		augend.integer.alias.octal,
		augend.date.new {
			pattern = "%Y/%m/%d",
			default_kind = "day",
			only_valid = false,
		},
		augend.date.new {
			pattern = "%Y-%m-%d",
			default_kind = "day",
			only_valid = false,
		},
		augend.date.new {
			pattern = "%m/%d",
			default_kind = "day",
			only_valid = true,
		},
        augend.date.new({
            pattern = "%Y年%-m月%-d日",
            default_kind = "day",
            only_valid = false,
        }),
        augend.date.new({
            pattern = "%-m月%-d日",
            default_kind = "day",
            only_valid = false,
        }),
		augend.constant.alias.ja_weekday_full,
    }
})
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
on_cmd = 'FuzzyMotion'
lua_add = '''
    vim.g.fuzzy_motion_labels = {
        'L', 'K', 'J', 'P', 'O', 'I', 'H', 'U', 'F',
        'D', 'S', 'R', 'E', 'W', 'A', 'G', 'T', 'Y',
        'N', 'B', 'M', 'V', 'C', 'Q', 'X', 'Z'
    }
    vim.g.fuzzy_motion_matchers = { 'fzf', 'kensaku' }
    vim.keymap.set('n', '<Leader><Space>', vim.cmd.FuzzyMotion)
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
on_cmd = ['TmuxNavigateLeft', 'TmuxNavigateDown', 'TmuxNavigateUp', 'TmuxNavigateRight']
hook_add = '''
  let g:tmux_navigator_no_mappings = 1
  nnoremap <silent> <C-w>h <Cmd>TmuxNavigateLeft<CR>
  nnoremap <silent> <C-w>j <Cmd>TmuxNavigateDown<CR>
  nnoremap <silent> <C-w>k <Cmd>TmuxNavigateUp<CR>
  nnoremap <silent> <C-w>l <Cmd>TmuxNavigateRight<CR>
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
depends = 'nvim-treesitter'
on_event = ['CursorMoved', 'CursorMovedI']

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
depends = 'nvim-treesitter'
on_event = ['CursorHold', 'CursorMoved', 'CursorMovedI']
lua_source = '''
    require('vimrc.highlight').set {
        IndentBlanklineIndentChar = { fg = '#373741', nocombine = true },
        IndentBlanklineScopeChar = { fg = '#737378', nocombine = true },
    }
    require('ibl').setup {
        indent = {
            char = '│',
            highlight = 'IndentBlanklineIndentChar',
        },
        scope = {
            show_start = false,
            show_end = false,
            highlight = 'IndentBlanklineScopeChar',
        },
    }
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = 'BufReadPost'
hook_source = '''
  lua require'gitsigns'.setup()
'''

[[plugins]]
repo = 'uga-rosa/ccc.nvim'
on_event = 'BufReadPost'
lua_source = '''
  local ccc = require('ccc')
  local mapping = ccc.mapping
  ccc.setup {
      bar_len = 40,
      point_char = '■',
      point_color = '#202020',
      highlighter = { auto_enable = true },
      mappings = {
          ['q'] = mapping.none,
          ['<ESC>'] = mapping.quit,
          ['<Left>'] = mapping.decrease1,
          ['<Right>'] = mapping.increase1
      }
  }
'''

[[plugins]]
repo = 'petertriho/nvim-scrollbar'
on_event = 'WinScrolled'
lua_source = '''
  require('scrollbar').setup {
      handle = { color = '#4B4B4B' },
      excluded_filetypes = {
          "vim-ui-input",
          "ddu-ff-filter",
          "ddu-filer"
      }
  }
'''

[[plugins]]
repo = 'nvim-treesitter/playground'
on_cmd = ['TSHighlightCapturesUnderCursor', 'TSPlaygroundToggle']

[[plugins]]
repo = 'cocopon/inspecthi.vim'
on_cmd = 'Inspecthi'

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_cmd = 'TComment'
hook_add = '''
  let g:tcomment_maps = 0
  xnoremap _ :TComment<CR>
  nnoremap _ <Cmd>TComment<CR>
'''

[[plugins]]
repo = 'skanehira/denops-silicon.vim'
depends = 'denops.vim'
# on_event = 'CmdlineEnter'
on_cmd = 'Silicon'
hook_add = '''
  let g:silicon_options = {
    \  'font': 'PleckJP',
    \  'no_line_number': v:false,
    \  'no_round_corner': v:false,
    \  'no_window_controls': v:false,
    \  'background_color': '#303030',
    \  'line_offset': 1,
    \  'line_pad': 2,
    \  'pad_horiz': 80,
    \  'pad_vert': 100,
    \  'shadow_blur_radius': 0,
    \  'shadow_color': '#f6f5f5',
    \  'shadow_offset_x': 0,
    \  'shadow_offset_y': 0,
    \  'tab_width': 4,
    \  'theme': 'GitHub',
    \ }
'''

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'pnpm install --production'
on_ft = ['astro', 'typescriptreact', 'markdown']
hook_source = '''
  autocmd BufWritePre *.astro,*.tsx PrettierAsync
'''
[plugins.ftplugin]
markdown = '''
  let g:prettier#config#tab_width = 2
'''

[[plugins]]
repo = 'thinca/vim-partedit'
depends = 'context_filetype.vim'
on_func = 'partedit#start'
lua_add = '''
    vim.keymap.set('n', '<Leader>e', function()
        local context = vim.fn['context_filetype#get']()
        if context == nil or context.range == { { 0, 0 }, { 0, 0 } } then
            error('[partedit] Context is not found')
            return
        end
        vim.ui.select({ 'split', 'vsplit', 'rightbelow split', 'rightbelow vsplit' }, {
            prompt = 'Select partedit opener',
            format_item = function(item)
                return 'Open as ' .. item
            end
        }, function(item, _)
            if item == nil then
                return
            end
            vim.fn['partedit#start'](context.range[1][1], context.range[2][1], {
                filetype = context.filetype,
                opener = item
            })
        end)
    end)
'''

[[plugins]]
repo = 'kat0h/bufpreview.vim'
on_ft = 'markdown'

[[plugins]]
repo = 'MeanderingProgrammer/markdown.nvim'
on_ft = 'markdown'
lua_source = '''
  require('render-markdown').setup {
    heading = { icons = { '# ', '## ', '### ', '#### ', '##### ', '###### ' } },
  }
'''

[[plugins]]
repo = 'chomosuke/typst-preview.nvim'
on_ft = 'typst'
lua_source = '''
  require('typst-preview').setup {
      invert_colors = 'auto'
  }
'''

[[plugins]]
repo = 'ryota2357/vim-skim-synctex'
# repo = '~/Projects/VimPlugin/vim-skim-synctex'
depends = 'denops.vim'
on_ft = 'tex'
hook_source = '''
  call synctex#option('readingBar', v:true)
  call synctex#option('autoQuit', v:true)
  call synctex#start()
'''
[plugins.ftplugin]
tex = '''
  nnoremap <buffer> <Leader>s <Cmd>call synctex#forwardSerch()<CR>
'''
