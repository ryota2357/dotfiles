[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
on_source = '''
  lua vim.notify = require('notify')
'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
hook_add = '''
  inoremap <expr><C-n>  pum#visible() ? pum#map#select_relative(+1) : '<Cmd>normal! gj<CR>'
  inoremap <expr><C-p>  pum#visible() ? pum#map#select_relative(-1) : '<Cmd>normal! gk<CR>'
  inoremap <expr><Down> pum#visible() ? pum#map#select_relative(+1) : '<Cmd>normal! gj<CR>'
  inoremap <expr><Up>   pum#visible() ? pum#map#select_relative(-1) : '<Cmd>normal! gk<CR>'
  " lexima.vimで定義
  "inoremap <expr><CR>   pum#visible() ? pum#map#confirm()           : '<CR>'
  set completeopt=menuone,noinsert
'''
hook_source = '''
  call pum#set_option('padding', v:true)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
depends = 'pum.vim'
on_event = 'InsertEnter'
hook_add = '''
  let g:lexima_no_default_rules = v:true
  let g:lexima_map_escape = ''
  let g:lexima_accept_pum_with_enter = v:false
  autocmd FileType ddu-ui-filer let b:lexima_disabled = v:true
  let g:lexima_custom = [
    \   { 'char': '(', 'input_after': ')', 'except': '\\\%#' },
    \   { 'char': '[', 'input_after': ']', 'except': '\\\%#' },
    \   { 'char': '{', 'input_after': '}', 'except': '\\\%#' },
    \   { 'char': '"', 'input_after': '"', 'except': '\\\%#' },
    \   { 'char': "'", 'input_after': "'", 'except': '\\\%#' },
    \   { 'char': '`', 'input_after': '`', 'except': '\\\%#' },
    \   { 'char': ')', 'at': '(\%#)', 'leave': 1 },
    \   { 'char': ']', 'at': '\%#\]', 'leave': 1 },
    \   { 'char': ',', 'at': '\w\%#', 'input': ', ' },
    \   { 'char': ';', 'at': '\%#)',  'leave': ')', 'input': ';' },
    \   { 'char': '<BS>', 'at': '(\%#)',   'delete': 1 },
    \   { 'char': '<BS>', 'at': '\[\%#\]', 'delete': 1 },
    \   { 'char': '<BS>', 'at': '{\%#}',   'delete': 1 },
    \   { 'char': '<BS>', 'at': '"\%#"',   'delete': 1 },
    \   { 'char': '<BS>', 'at': "'\%#'",   'delete': 1 },
    \   { 'char': '<BS>', 'at': '`\%#`',   'delete': 1 },
    \   { 'char': '<CR>', 'at': '{\%#}',   'input_after': '<CR>' },
    \   { 'char': '<CR>', 'at': '(\%#)',   'input_after': '<CR>' },
    \ ]
  let g:lexima_custom_tex = [
    \   { 'char': '$',    'input_after': '$' },
    \   { 'char': '<BS>', 'at': '\$\%#\$', 'delete': 1 },
    \   { 'char': '<CR>', 'at': '^ *\\item.*\%#', 'input': '<CR>\item ', 'except': '\\\\\%#' },
    \ ]
  let g:lexima_custom_tag = [
    \   { 'char': '>', 'at': '<\(\w\+\)\%#', 'input_after': '</\1>', 'with_submatch': v:true },
    \   { 'char': '<CR>', 'at': '<\w\+>\%#<\/\w\+>', 'input_after': '<CR>' },
    \ ]
'''
hook_source = '''
  call lexima#clear_rules()
  for rule in g:lexima_custom
    call lexima#add_rule(rule)
  endfor
  for rule in g:lexima_custom_tex
    let rule['filetype'] = 'tex'
    call lexima#add_rule(rule)
  endfor
  for rule in g:lexima_custom_tag
    let rule['filetype'] = ['html', 'typescriptreact']
    call lexima#add_rule(rule)
  endfor
  execute printf("inoremap <expr><silent> <CR> pum#visible() ? pum#map#confirm() : lexima#expand(%s, 'i')",
                \ string(lexima#string#to_mappable('<CR>'))
                \ )
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
on_cmd = 'FuzzyMotion'
hook_add = '''
 nnoremap <Leader><Space> <Cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufEnter'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = 'all',
  additional_vim_regex_highlighting = false,

  -- m1でエラー出るから
  ignore_install = { 'phpdoc' },

  -- help : ハイライト変になる
  -- tex  : snipet挿入後とかでエラーが出る
  highlight = {
    enable = true,
    disable = { 'help', 'latex', 'tex' },
  },
}
EOF
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = 'BufEnter'
hook_source = '''
  lua require'gitsigns'.setup()
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = 'BufEnter'
hook_source = '''
  highlight IndentBlanklineContextChar guifg=#6E6E6E gui=nocombine
  lua require'indent_blankline'.setup {
  \  show_current_context = true,
  \ }
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_event = 'BufEnter'
hook_source = '''
  lua require'colorizer'.setup()
'''

[[plugins]]
repo = 'nvim-treesitter/playground'
on_cmd = 'TSHighlightCapturesUnderCursor'

[[plugins]]
repo = 'cocopon/inspecthi.vim'
on_cmd = 'Inspecthi'

# markdown preview
# コマンド :PreviewMarkdown       # Start the preview
#          :PreviewMarkdownStop   # Stop the preview
#          :PreviewMarkdownToggle # Toggle the window
[[plugins]]
repo = 'kat0h/bufpreview.vim'
on_ft = 'markdown'

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_cmd = 'TComment'
hook_add = '''
  let g:tcomment_maps = 0
  vnoremap ? :TComment<CR>
  nnoremap ? <Cmd>TComment<CR>
'''

# formatter
[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'
on_ft = ['markdown', 'typescriptreact']
hook_source = '''
  autocmd BufWritePre *.tsx,*.md PrettierAsync
'''
hook_add = '''
  let g:prettier#config#tab_width = 2
'''

[[plugins]]
repo = 'ryota2357/vim-skim-synctex'
# repo = '~/Projects/VimPlugin/vim-skim-synctex'
depends = 'denops.vim'
on_ft = 'tex'
hook_source = '''
  call synctex#option('readingBar', v:true)
  call synctex#option('autoQuit', v:true)
  call synctex#start()
'''
[plugins.ftplugin]
tex = '''
  nnoremap <buffer> <Leader>s <Cmd>call synctex#forwardSerch()<CR>
'''
