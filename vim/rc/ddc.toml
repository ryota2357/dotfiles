[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold', 'CmdlineEnter']
hook_add = '''
  let g:ddc_source_options = {
    \   '_': {
    \     'ignoreCase': v:true,
    \     'matchers': ['matcher_fuzzy'],
    \     'sorters': ['sorter_fuzzy'],
    \     'converters': ['converter_remove_overlap']
    \   }
    \ }

  nnoremap : <Cmd>call <SID>CommandlinePre()<CR>:

  function! s:CommandlinePre() abort
    cnoremap <expr><Tab>  pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : ddc#manual_complete()
    cnoremap <expr><C-n>  pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<Down>'
    cnoremap <expr><C-p>  pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<Up>'
    cnoremap <expr><Down> pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<Down>'
    cnoremap <expr><Up>   pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<Up>'
    cnoremap <expr><CR>   pum#visible() && pum#complete_info(['selected']) != {'selected': -1} ? '<Cmd>call pum#map#confirm()<CR>' : '<CR>'

    autocmd User DDCCmdlineLeave ++once call s:CommandlinePost()
    autocmd InsertEnter <buffer> ++once call s:CommandlinePost()

    set completeopt=menu,noselect

    call ddc#enable_cmdline_completion()
  endfunction

  function! s:CommandlinePost() abort
    silent! cunmap <Tab>
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <Down>
    silent! cunmap <Up>
    silent! cunmap <CR>
    set completeopt=menuone,noinsert
  endfunction
'''
hook_source = '''
  call ddc#custom#patch_global('sources', ['around'])
  call ddc#custom#patch_global('cmdlineSources', ['cmdline', 'cmdline-history', 'around'])
  call ddc#custom#patch_global('sourceOptions', g:ddc_source_options)
  call ddc#custom#patch_global('sourceParams', {
    \   'around': { 'maxSize': 500 }
    \ })
  call ddc#custom#patch_global('autoCompleteEvents', [
    \   'InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineEnter', 'CmdlineChanged',
    \ ])
  call ddc#custom#patch_global('backspaceCompletion', v:true)
  call ddc#custom#patch_global('completionMenu', 'pum.vim')

  call ddc#custom#patch_filetype(['vim'], {
    \   'sources': ['vsnip', 'nvim-lsp', 'around']
    \ })
  call ddc#custom#patch_filetype(['cpp', 'dart', 'typescript'], {
    \   'sources': ['nvim-lsp', 'around']
    \ })
  call ddc#custom#patch_filetype(['tex'], {
    \   'sources': ['vsnip', 'around'],
    \   'sourceOptions': {
    \     'vsnip': { 'minAutoCompleteLength': 1 }
    \   }
    \ })
  call ddc#custom#patch_filetype(['ddu-ff-filter'],
    \   'specialBufferCompletion', v:false
    \ )

  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
  inoremap <expr><C-n>  pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<Cmd>normal! gj<CR>'
  inoremap <expr><C-p>  pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<Cmd>normal! gk<CR>'
  inoremap <expr><Down> pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<Cmd>normal! gj<CR>'
  inoremap <expr><Up>   pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<Cmd>normal! gk<CR>'
  inoremap <expr><CR>   pum#visible() ? '<Cmd>call pum#map#confirm()<CR>'           : '<CR>'
  set completeopt=menuone,noinsert
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_source_options['around'] = {
    \   'mark': ' ',
    \   'matchers': ['matcher_head', 'matcher_length']
    \ }
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_source_options['nvim-lsp'] = {
    \   'mark': ' ',
    \   'dup': v:true,
    \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
    \ }
'''

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_source_options['cmdline'] = {
    \   'mark': ' ',
    \   'minAutoCompleteLength': 1
    \ }
'''

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_source_options['cmdline-history'] = {
    \   'mark': ' ',
    \   'matchers': ['matcher_head', 'matcher_length'],
    \ }
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
hook_add = '''
  let g:vsnip_snippet_dir = expand('~/dotfiles/vim/snippet')
  imap <expr><Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
  imap <expr><S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'
depends = 'vim-vsnip'
hook_source = '''
  let g:ddc_source_options['vsnip'] = {
    \   'mark': ' ',
    \   'dup': v:true
    \ }

  " pum, ddc との連携
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
'''

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = ['BufReadPost', 'InsertLeavePre']
hook_add = '''
  autocmd BufWritePre *.ts,*.dart lua vim.lsp.buf.formatting_sync()
'''
hook_source = '''
  lua << EOF
  local on_attach = function (client, bufnr)
    local function set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local opts = { noremap=true, silent=true }
    set_keymap('n', '<Leader>d', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    set_keymap('n', '<Leader>i', '<Cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    set_keymap('n', '<Leader>r', '<Cmd>lua vim.lsp.buf.rename()<CR>', opts)
    set_keymap('n', '<Leader>x', '<Cmd>lua vim.diagnostic.open_float()<CR>', opts)
    set_keymap('n', '<Leader>j', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  end

  require('nvim-lsp-installer').setup({
    automatic_installation = true
  })
  local nvim_lsp = require('lspconfig')
  local util = require('lspconfig.util')
  nvim_lsp.clangd.setup{on_attach = on_attach}
  nvim_lsp.vimls.setup{on_attach = on_attach}
  nvim_lsp.dartls.setup{
    on_attach = on_attach,
    -- single_file_support = true
    root_dir = util.root_pattern("pubspec.yaml", ".dart")
  }
  nvim_lsp.denols.setup{
    on_attach = on_attach,
    init_options = {
      lint = true,
      unstable = true,
    },
    root_dir = util.root_pattern("deno.json", "deno.jsonc", "tsconfig.json", ".git", "denops")
  }
  nvim_lsp.jsonls.setup{}
  nvim_lsp.omnisharp.setup{}
  nvim_lsp.texlab.setup{}
  nvim_lsp.taplo.setup{}
  nvim_lsp.yamlls.setup{}
EOF
'''

[[plugins]]
repo ='williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
  call popup_preview#enable()
'''
