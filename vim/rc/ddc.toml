[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
  call ddc#custom#patch_global('sources', ['around'])
  call ddc#custom#patch_global('sourceOptions', {
    \   '_': {
    \     'ignoreCase': v:true,
    \     'matchers': ['matcher_head'],
    \     'sorters': ['sorter_rank'],
    \     'converters': ['converter_remove_overlap'],
    \   },
    \   'around': {
    \     'mark': 'A',
    \     'matchers': ['matcher_head', 'matcher_length']
    \   },
    \   'nvim-lsp': {
    \     'mark': 'LSP',
    \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \   },
    \   'vsnip': {
    \     'mark': 'S',
    \     'dup': v:true
    \   },
    \   'cmdline-history': { 'mark': 'H' },
    \ })
  call ddc#custom#patch_global('sourceParams', {
    \   'around': { 'maxSize': 500 },
    \ })
  call ddc#custom#patch_global('autoCompleteEvents', [
    \   'InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineEnter', 'CmdlineChanged',
    \ ])
  call ddc#custom#patch_global('backspaceCompletion', v:true)
  call ddc#custom#patch_global('completionMenu', 'pum.vim')

  call ddc#custom#patch_filetype(['cpp', 'dart', 'vim'], {
    \   'sources': ['nvim-lsp', 'vsnip', 'around']
    \ })
  call ddc#custom#patch_filetype(['tex'], {
    \   'sources': ['vsnip', 'around']
    \ })

  call ddc#enable()
'''
hook_add = '''
  nnoremap : <Cmd>call CommandlinePre()<CR>:

  function! CommandlinePre() abort
    cnoremap <expr><Tab>  pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : ddc#manual_complete()
    cnoremap <expr><C-n>  pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<Down>'
    cnoremap <expr><C-p>  pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<Up>'
    cnoremap <expr><Down> pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<Down>'
    cnoremap <expr><Up>   pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<Up>'
    cnoremap <expr><CR>   pum#visible() ? '<Cmd>call pum#map#confirm()<CR>'           : '<CR>'

    " Overwrite sources
    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    call ddc#custom#patch_buffer('sources', ['cmdline', 'cmdline-history', 'around'])

    autocmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd InsertEnter <buffer> ++once call CommandlinePost()

    call ddc#enable_cmdline_completion()
  endfunction

  function! CommandlinePost() abort
    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif
    silent! cunmap <Tab>
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <Down>
    silent! cunmap <Up>
    silent! cunmap <CR>
  endfunction
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
  inoremap <expr><C-n>  pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<Down>'
  inoremap <expr><C-p>  pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<Up>'
  inoremap <expr><Down> pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<Down>'
  inoremap <expr><Up>   pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<Up>'
  inoremap <expr><CR>   pum#visible() ? '<Cmd>call pum#map#confirm()<CR>'           : '<CR>'
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

# [[plugins]]
# repo = 'tani/ddc-fuzzy'
# on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

# LSP
# 参考: https://riq0h.jp/2021/09/15/084023/
[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
  lua << EOF
  local nvim_lsp = require('lspconfig')
  local on_attach = function (client, bufnr)
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

    local opts = { noremap=true, silent=true }
    buf_set_keymap('n', '<Leader>d', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', '<Leader>i', '<Cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', '<Leader>r', '<Cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', '<Leader>x', '<Cmd>lua vim.diagnostic.open_float()<CR>', opts)
    buf_set_keymap('n', '<Leader>j', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  end

  local lsp_installer = require("nvim-lsp-installer")
  lsp_installer.on_server_ready(
    function(server)
      local opts = {}
      opts.on_attach = on_attach
      server:setup(opts)
      vim.cmd [[ do User LspAttachBuffers ]]
    end
  )
EOF
'''

[[plugins]]
repo ='williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
  call popup_preview#enable()
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
hook_add = '''
  let g:vsnip_snippet_dir = expand('~/dotfiles/vim/snippet')
  imap <expr><Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
  imap <expr><S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'
depends = 'vim-vsnip'
hook_add = '''
  " pum, ddc との連携
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
'''
