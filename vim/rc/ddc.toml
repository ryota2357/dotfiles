[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold', 'CmdlineEnter']
hook_add = '''
  let g:ddc_source_options = {
    \   '_': {
    \     'ignoreCase': v:true,
    \     'matchers': ['matcher_fuzzy'],
    \     'sorters': ['sorter_fuzzy'],
    \     'converters': ['converter_remove_overlap']
    \   }
    \ }

  nnoremap : <Cmd>call <SID>CommandlinePre()<CR>:

  function! s:CommandlinePre() abort
    cnoremap <expr><Tab>  pum#visible() ? pum#map#insert_relative(+1) : ddc#manual_complete()
    cnoremap <expr><C-n>  pum#visible() ? pum#map#select_relative(+1) : '<Down>'
    cnoremap <expr><C-p>  pum#visible() ? pum#map#select_relative(-1) : '<Up>'
    cnoremap <expr><Down> pum#visible() ? pum#map#select_relative(+1) : '<Down>'
    cnoremap <expr><Up>   pum#visible() ? pum#map#select_relative(-1) : '<Up>'
    cnoremap <expr><CR>   pum#visible() && pum#complete_info()['selected'] != -1 ? pum#map#confirm() : '<CR>'

    autocmd User DDCCmdlineLeave ++once call s:CommandlinePost()
    autocmd InsertEnter <buffer> ++once call s:CommandlinePost()

    set completeopt=menu,noselect

    call ddc#enable_cmdline_completion()
  endfunction

  function! s:CommandlinePost() abort
    silent! cunmap <Tab>
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <Down>
    silent! cunmap <Up>
    silent! cunmap <CR>
    set completeopt=menuone,noinsert
  endfunction
'''
hook_source = '''
  call ddc#custom#patch_global('sources', ['around'])
  call ddc#custom#patch_global('cmdlineSources', ['cmdline', 'cmdline-history', 'around'])
  call ddc#custom#patch_global('sourceOptions', g:ddc_source_options)
  call ddc#custom#patch_global('sourceParams', {
    \   'around': { 'maxSize': 500 }
    \ })
  call ddc#custom#patch_global('autoCompleteEvents', [
    \   'InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineEnter', 'CmdlineChanged',
    \ ])
  call ddc#custom#patch_global('backspaceCompletion', v:true)
  call ddc#custom#patch_global('completionMenu', 'pum.vim')

  call ddc#custom#patch_filetype(['vim'], {
    \   'sources': ['vsnip', 'nvim-lsp', 'around']
    \ })
  call ddc#custom#patch_filetype(['cpp', 'dart', 'typescript', 'typescriptreact', 'rust', 'lua'], {
    \   'sources': ['nvim-lsp', 'around']
    \ })
  call ddc#custom#patch_filetype(['css', 'scss'], {
    \   'sources': ['nvim-lsp']
    \ })
  call ddc#custom#patch_filetype(['tex'], {
    \   'sources': ['vsnip', 'around'],
    \   'sourceOptions': {
    \     'vsnip': { 'minAutoCompleteLength': 1 }
    \   }
    \ })
  call ddc#custom#patch_filetype(['ddu-ff-filter'],
    \   'specialBufferCompletion', v:false
    \ )

  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_source_options['around'] = {
    \   'mark': '',
    \   'matchers': ['matcher_head', 'matcher_length']
    \ }
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_source_options['nvim-lsp'] = {
    \   'mark': ' ',
    \   'dup': v:true,
    \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
    \ }
'''

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_source_options['cmdline'] = {
    \   'mark': ' ',
    \   'minAutoCompleteLength': 1
    \ }
'''

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'
hook_source = '''
  let g:ddc_source_options['cmdline-history'] = {
    \   'mark': ' ',
    \   'matchers': ['matcher_head', 'matcher_length'],
    \ }
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
hook_add = '''
  let g:vsnip_snippet_dir = expand('~/dotfiles/vim/snippet')
  imap <expr><Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
  imap <expr><S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'
depends = 'vim-vsnip'
hook_source = '''
  let g:ddc_source_options['vsnip'] = {
    \   'mark': ' ',
    \   'dup': v:true
    \ }

  " pum, ddc との連携
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
'''

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufReadPost'
hook_add = '''
  autocmd BufWritePre *.ts,*.dart,*.rs lua vim.lsp.buf.formatting()
  command! Format lua vim.lsp.buf.formatting_sync()
'''
hook_source = '''
lua << EOF
  local nvim_lsp = require('lspconfig')
  local lsp_installer = require('nvim-lsp-installer')
  local util = require('lspconfig.util')

  lsp_installer.setup({
    automatic_installation = true,
    ui = {
      icons = {
        server_installed = "",
        server_pending = "",
        server_uninstalled = ""
      }
    }
  })

  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  for _, server in ipairs(lsp_installer.get_installed_servers()) do
    local server_name = server.name
    local opts = {}
    opts.on_attach = function(_, bufnr)
      local function nnoremap(key, cmd) vim.api.nvim_buf_set_keymap(bufnr, 'n', key, cmd, { noremap = true, silent = true }) end
      nnoremap(';d', '<Cmd>lua vim.lsp.buf.definition()<CR>')
      nnoremap(';i', '<Cmd>lua vim.lsp.buf.implementation()<CR>')
      nnoremap(';r', '<Cmd>lua vim.lsp.buf.rename()<CR>')
      nnoremap(';x', '<Cmd>lua vim.diagnostic.open_float()<CR>')
      nnoremap(';l', '<Cmd>lua vim.lsp.buf.hover()<CR>')
      nnoremap(';s', '<Cmd>lua vim.lsp.buf.signature_help()<CR>')
      nnoremap(';a', '<Cmd>lua vim.lsp.buf.code_action()<CR>')
      nnoremap(';f', '<Cmd>lua vim.lsp.buf.references()<CR>')
    end
    if server_name == 'cssls' then
      opts.capabilities = capabilities
    elseif server_name == 'dartls' then
      opts.root_dir = util.root_pattern('pubspec.yaml', '.dart')
      opts.capabilities = capabilities
    elseif server_name == 'denols' then
      opts.init_options = { lint = true, unstable = true }
      opts.root_dir = util.root_pattern('deno.json', 'deno.jsonc', 'denops')
      opts.single_file_support = false
    elseif server_name == 'html' then
      opts.capabilities = capabilities
    elseif server_name == 'sumneko_lua' then
      opts.settings = {
        Lua = {
          diagnostics = {
            globals = { 'vim' }
          }
        }
      }
    elseif server_name == 'tsserver' then
      opts.root_dir = util.root_pattern('package.json', 'node_modules')
    end
    nvim_lsp[server_name].setup(opts)
  end
EOF
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
  call popup_preview#enable()
'''
