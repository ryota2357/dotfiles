[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim', 'context_filetype.vim']
on_event = ['InsertEnter', 'CursorHold', 'CmdlineEnter']
lua_add = '''
    local ddc = require('rc.ddc')
    ddc.set_source_options('_', {
        ignoreCase = true,
        matchers = { 'matcher_fuzzy' },
        sorters = { 'sorter_fuzzy' },
        converters = { 'converter_fuzzy' },
    })
    ddc.enable_cmdline_completion_with(':', function(cmap, pum)
        cmap('<Tab>', function()
            return pum.visible() and pum.map.insert_relative(1, "loop") or ddc.map.manual_complete()
        end)
        cmap({ '<C-n>', '<Down>' }, function()
            return pum.visible() and pum.map.insert_relative(-1, "loop") or '<Down>'
        end)
        cmap({ '<C-p>', '<Up>' }, function()
            return pum.visible() and pum.map.insert_relative(1, "loop") or '<Up>'
        end)
        cmap('<CR>', function()
            if pum.visible() and pum.complete_info().selected ~= -1 then
                return pum.map.confirm()
            else
                return '<CR>'
            end
        end)
    end)
'''
lua_source = '''
    local ddc = require('rc.ddc')

    ddc.custom.patch_global({
        ui = 'pum',
        sources = { 'around', 'skkeleton' },
        cmdlineSources = { 'cmdline', 'cmdline-history', 'around' },
        sourceOptions = ddc.get_source_options(),
        sourceParams = { ['around'] = { maxSize = 500 } },
        autoCompleteEvents = { 'InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineEnter', 'CmdlineChanged' },
        backspaceCompletion = true,
    })
    ddc.custom.patch_filetype({ 'vim', 'typescript', 'typescriptreact', 'astro' }, {
        sources = { 'vsnip', 'nvim-lsp', 'around' },
    })
    ddc.custom.patch_filetype({ 'c', 'cpp', 'cs', 'dart', 'python', 'rust', 'ruby', 'lua' }, {
        sources = { 'nvim-lsp', 'around' },
    })
    ddc.custom.patch_filetype({ 'css', 'scss' }, {
        sources = { 'nvim-lsp' },
    })
    ddc.custom.patch_filetype({ 'tex' }, {
        sources = { 'nvim-lsp', 'vsnip', 'around', 'skkeleton' },
        sourceOptions = {
            ['vsnip'] = { minAutoCompleteLength = 1 },
            ['nvim-lsp'] = {
                minAutoCompleteLength = 3,
                matchers = { 'matcher_head' }
            },
        },
    })
    ddc.custom.patch_filetype({ 'markdown' }, {
        sources = { 'around', 'mocword' },
    })
    ddc.custom.patch_filetype({ 'pdf', 'mips' }, {
        sources = { 'vsnip', 'around' },
    })
    ddc.custom.patch_filetype({ 'ddu-ff-filter' }, {
        specialBufferCompletion = false,
    })

    vim.cmd [[
      call ddc#custom#set_context_global({ ->
        \ ddc#syntax#in('comment') ? #{
        \   sources: ['around', 'mocword'],
        \ } : {} })
      " Partedit で補完ができるように
      autocmd OptionSet buftype if &buftype ==# 'acwrite' | call ddc#custom#patch_buffer('specialBufferCompletion', v:true) | endif
    ]]

    ddc.enable()
'''

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'
lua_source = '''
    require('rc.ddc').set_source_options('around', {
        mark = ' ',
        matchers = { 'matcher_head', 'matcher_length' },
        converters = { 'converter_remove_overlap' },
    })
'''

[[plugins]]
repo = 'Shougo/ddc-source-mocword'
on_source = 'ddc.vim'
lua_source = '''
    require('rc.ddc').set_source_options('mocword', {
        mark = ' ',
        matchers = { 'matcher_head', 'matcher_length' },
        converters = { 'converter_remove_overlap' },
        isVolatile = true,
        minAutoCompleteLength = 1,
    })
'''

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'
lua_source = '''
    require('rc.ddc').set_source_options('nvim-lsp', {
        mark = ' ',
        dup = 'keep',
        forceCompletionPattern = [[\.\w*|:\w*|->\w*]],
    })
'''

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'
lua_source = '''
    require('rc.ddc').set_source_options('cmdline', {
        mark = ' ',
        minAutoCompleteLength = 1,
    })
'''

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'
lua_source = '''
    require('rc.ddc').set_source_options('cmdline-history', {
        mark = ' ',
        matchers = { 'matcher_head', 'matcher_length' },
        converters = { 'converter_remove_overlap' },
    })
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
lua_add = '''
    vim.g.vsnip_snippet_dir = vim.fn.expand('~/dotfiles/vim/snippet')
    vim.keymap.set('i', '<Tab>', function()
        return vim.fn['vsnip#jumpable'](1) ~= 0 and '<Plug>(vsnip-jump-next)' or '<Tab>'
    end, { expr = true })
    vim.keymap.set('i', '<S-Tab>', function()
        return vim.fn['vsnip#jumpable'](-1) ~= 0 and '<Plug>(vsnip-jump-prev)' or '<S-Tab>'
    end, { expr = true })
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'
depends = 'vim-vsnip'
lua_source = '''
    require('rc.ddc').set_source_options('vsnip', {
        mark = ' ',
        dup = 'keep',
    })

    -- pum, ddc との連携
    require('rc.util').autocmd 'User' {
        pattern = 'PumCompleteDone',
        command = 'call vsnip_integ#on_complete_done(g:pum#completed_item)',
    }
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
on_source = 'ddc.vim'
lua_source = '''
    require('rc.ddc').set_source_options('skkeleton', {
        mark = ' ',
        matchers = { 'matcher_head', 'matcher_length' },
        converters = { 'converter_remove_overlap' },
        isVolatile = true,
        minAutoCompleteLength = 2,
    })
    vim.fn['skkeleton#config']({
        globalDictionaries = { '~/.local/share/SKK/dict/SKK-JISYO.L' },
        eggLikeNewline = true,
        registerConvertResult = true,
    })
    vim.keymap.set({ 'i', 'c' }, '<C-j>', '<Plug>(skkeleton-enable)')
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = 'call signature_help#enable()'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = 'call popup_preview#enable()'
