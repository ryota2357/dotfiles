[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufReadPost'
hook_add = '''
  if has('nvim-0.8')
    autocmd BufWritePre *.ts,*.dart,*.rs lua vim.lsp.buf.format()
    command! Format lua vim.lsp.buf.format()
  else
    autocmd BufWritePre *.ts,*.dart,*.rs lua vim.lsp.buf.formatting()
    command! Format lua vim.lsp.buf.formatting()
  endif
'''
lua_source = '''
  local nvim_lsp = require('lspconfig')
  local util = require('lspconfig.util')

  for type, icon in pairs({ Error = "", Warn = "", Hint = "", Info = "" }) do
    local hl = "DiagnosticSign" .. type
    vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
  end

  vim.diagnostic.config({
    update_in_insert = true,
  })

  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  local on_attach = function(_, bufnr)
    local nnoremap =  function(key, cmd) vim.keymap.set('n', key, cmd, { buffer = bufnr, silent = true }) end
    nnoremap(',d', vim.lsp.buf.definition)
    nnoremap(',i', vim.lsp.buf.implementation)
    nnoremap(',r', vim.lsp.buf.rename)
    nnoremap(',x', vim.diagnostic.open_float)
    nnoremap(',l', vim.lsp.buf.hover)
    nnoremap(',s', vim.lsp.buf.signature_help)
    nnoremap(',a', vim.lsp.buf.code_action)
    nnoremap(',f', vim.lsp.buf.references)
  end

  local add_opts = {
    denols = {
      init_options = { lint = true, unstable = true },
      root_dir = util.root_pattern('deno.json', 'deno.jsonc', 'denops'),
      single_file_support = false
    },
    omnisharp = {
      cmd = { 'dotnet',  vim.fn.stdpath('data') .. '/mason/packages/omnisharp/OmniSharp.dll' },
      enable_editorconfig_support = true,
      enable_ms_build_load_projects_on_demand = false,
      enable_roslyn_analyzers = true,
      organize_imports_on_format = false,
      enable_import_completion = false,
      sdk_include_prereleases = true,
      analyze_open_documents_only = false
    },
    sumneko_lua = {
      settings = {
        Lua = {
          runtime = { version = 'LuaJIT' },
          diagnostics = { globals = {'vim'} },
          workspace = { library = vim.api.nvim_get_runtime_file('', true) },
          telemetry = { enable = false },
        }
      }
    },
    tsserver = {
      root_dir = util.root_pattern('package.json', 'node_modules')
    }
  }

  require('mason-lspconfig').setup_handlers {
    function(server_name)
      if server_name == "omnisharp" then
        return
      end
      local opts = {
        on_attach = on_attach,
        capabilities = capabilities
      }
      Config.fn.table_insert_pairs(opts, add_opts[server_name])
      nvim_lsp[server_name].setup(opts)
    end
  }

  -- Mason に dartls ないので個別に設定、dartls は dart に付属してる
  nvim_lsp['dartls'].setup {
    on_attach = on_attach,
    capabilities = capabilities,
    root_dir = util.root_pattern('pubspec.yaml', '.dart')
  }
'''
[plugins.ftplugin]
cpp = '''
lua << EOF
  local notify = vim.notify
  vim.notify = function(msg, ...)
      if msg:match('warning: multiple different client offset_encodings') then
          return
      end
      notify(msg, ...)
  end
EOF
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  require('mason').setup {
    automatic_installation = true,
    ui = {
      icons = {
        package_installed = '',
        package_pending = '',
        package_uninstalled = ''
      }
    }
  }
  --  はddcの方で2幅に設定済み
  Config.fn.setcellwidths2({0xf05d, 0xf18e})
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
