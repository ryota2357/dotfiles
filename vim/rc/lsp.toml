[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['SchemaStore.nvim', 'ddc-source-lsp']
on_event = 'BufReadPost'
hook_add = '''
  autocmd BufWritePre *.ts,*.dart,*.rs,*.go lua vim.lsp.buf.format()
  command! Format lua vim.lsp.buf.format()
'''
lua_source = '''
    vim.diagnostic.config({
        update_in_insert = true,
        virtual_text = {
            prefix = "▰"
        },
        signs = {
            text = {
                [vim.diagnostic.severity.ERROR] = '',
                [vim.diagnostic.severity.WARN] = '',
                [vim.diagnostic.severity.HINT] = '󰌶',
                [vim.diagnostic.severity.INFO] = '',
            }
        }
    })

    require("vimrc.autocmd") "LspAttach" {
        callback = function(context)
            local bufnr = context.buf
            -- local client = vim.lsp.get_client_by_id(context.data.client_id)
            local nmap = function(key, cmd) vim.keymap.set("n", key, cmd, { buffer = bufnr, silent = true }) end
            nmap(",d", vim.lsp.buf.definition)
            nmap(",i", vim.lsp.buf.implementation)
            nmap(",r", vim.lsp.buf.rename)
            nmap(",x", vim.diagnostic.open_float)
            nmap(",l", vim.lsp.buf.hover)
            nmap(",s", vim.lsp.buf.signature_help)
            nmap(",a", vim.lsp.buf.code_action)
            nmap(",f", vim.lsp.buf.references)
            --client.server_capabilities.semanticTokensProvider = nil
        end
    }

    vim.lsp.config("*", {
        capabilities = require("ddc_source_lsp").make_client_capabilities()
    })

    for _, name in ipairs({
        "astro",
        "clangd",
        "cssls",
        "dartls",
        "denols",
        "dockerls",
        -- "efm",
        "gopls",
        "hls",
        "html",
        "tailwindcss",
        "jsonls",
        "lua_ls",
        "nil_ls",
        -- "omnisharp",
        "pyright",
        "rust_analyzer",
        "solargraph",
        "taplo",
        "texlab",
        "ts_ls",
        "typst_lsp",
        "vimls",
        "yamlls",
    }) do
        local config = vim.lsp.config[name]
        if config == nil then
            return
        end
        local cmd = config.cmd
        if cmd == nil or #cmd == 0 then
            return
        end
        if vim.fn.executable(cmd[1]) == 1 then
            vim.lsp.enable(name)
        end
    end
'''
[plugins.ftplugin]
cpp = '''
lua << EOF
  local notify = vim.notify
  vim.notify = function(msg, ...)
    if msg:match('warning: multiple different client offset_encodings') then
      return
    end
    notify(msg, ...)
  end
EOF
'''

# [[plugins]]
# repo = 'williamboman/mason.nvim'
# on_source = 'nvim-lspconfig'
# lua_source = '''
#     require('mason').setup {
#         automatic_installation = true,
#         ui = {
#             icons = {
#                 package_installed = '',
#                 package_pending = '',
#                 package_uninstalled = ''
#             }
#         }
#     }
# '''
#
# [[plugins]]
# repo = 'williamboman/mason-lspconfig.nvim'
# on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'j-hui/fidget.nvim'
rev = 'legacy'
on_source = 'nvim-lspconfig'
lua_source = '''
    require('fidget').setup {
        text = {
            spinner = "dots"
        },
        timer = {
            spinner_rate = 100,
            fidget_decay = 3000,
            task_decay = 1000,
        },
        fmt = {
            stack_upwards = false
        }
    }
'''

[[plugins]]
repo = 'b0o/SchemaStore.nvim'
on_source = 'nvim-lspconfig'
