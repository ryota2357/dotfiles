[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufReadPost'
hook_add = '''
  autocmd BufWritePre *.ts,*.dart,*.rs lua vim.lsp.buf.format()
  command! Format lua vim.lsp.buf.format()
'''
lua_source = '''
  local nvim_lsp = require('lspconfig')
  local util = require('lspconfig.util')
  local mason_lspconfig = require('mason-lspconfig')

  for type, icon in pairs({ Error = "", Warn = "", Hint = "", Info = "" }) do
    local hl = "DiagnosticSign" .. type
    vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
  end

  vim.diagnostic.config({
    update_in_insert = true,
    virtual_text = {
      prefix = '▰'
    }
  })

  local options = {
    global = {
      on_attach = function(client, bufnr)
        local nnoremap =  function(key, cmd) vim.keymap.set('n', key, cmd, { buffer = bufnr, silent = true }) end
        nnoremap(',d', vim.lsp.buf.definition)
        nnoremap(',i', vim.lsp.buf.implementation)
        nnoremap(',r', vim.lsp.buf.rename)
        nnoremap(',x', vim.diagnostic.open_float)
        nnoremap(',l', vim.lsp.buf.hover)
        nnoremap(',s', vim.lsp.buf.signature_help)
        nnoremap(',a', vim.lsp.buf.code_action)
        nnoremap(',f', vim.lsp.buf.references)
        client.server_capabilities.semanticTokensProvider = nil
      end,
      capabilities = (function()
        local c = vim.lsp.protocol.make_client_capabilities()
        c.textDocument.completion.completionItem.snippetSupport = true
        return c
      end)()
    },
    denols = {
      init_options = { lint = true, unstable = true },
      root_dir = util.root_pattern('deno.json', 'deno.jsonc', 'denops'),
      single_file_support = false
    },
    omnisharp = {
      cmd = { 'dotnet',  vim.fn.stdpath('data') .. '/mason/packages/omnisharp/OmniSharp.dll' },
      enable_editorconfig_support = true,
      enable_ms_build_load_projects_on_demand = false,
      enable_roslyn_analyzers = true,
      organize_imports_on_format = false,
      enable_import_completion = false,
      sdk_include_prereleases = true,
      analyze_open_documents_only = false,
      autostart = false
    },
    rust_analyzer = {
      settings = {
        rust_analyzer = {
          check = {
            features = 'all',
            command = 'clippy'
          }
        }
      }
    },
    lua_ls = {
      settings = {
        Lua = {
          runtime = { version = 'LuaJIT' },
          diagnostics = { globals = {'vim'} },
          workspace = { library = vim.api.nvim_get_runtime_file('', true) },
          telemetry = { enable = false }
        }
      }
    },
    tsserver = {
      single_file_support = false,
      root_dir = function(fname)
        local deno_root = util.root_pattern('deno.json', 'deno.jsonc', 'denops')(fname)
        local node_root = util.root_pattern('package.json', 'node_modules')(fname)
        if deno_root ~= nil then
            return nil
        end
        return node_root
      end
    },
    solargraph = {
      single_file_support = true
    },
    yamlls = {
      settings = {
        yaml = {
          keyOrdering = false,
        },
      }
    }
  }

  mason_lspconfig.setup_handlers {
    function(server_name)
      local opts = vim.tbl_extend('force', options.global, options[server_name] or {})
      nvim_lsp[server_name].setup(opts)
    end
  }

  -- Mason に dartls ないので個別に設定、dartls は dart に付属してる
  nvim_lsp['dartls'].setup {
    on_attach = options.global.on_attach,
    capabilities = options.global.capabilities,
    root_dir = util.root_pattern('pubspec.yaml', '.dart')
  }
'''
[plugins.ftplugin]
cpp = '''
lua << EOF
  local notify = vim.notify
  vim.notify = function(msg, ...)
    if msg:match('warning: multiple different client offset_encodings') then
      return
    end
    notify(msg, ...)
  end
EOF
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  require('mason').setup {
    automatic_installation = true,
    ui = {
      icons = {
        package_installed = '',
        package_pending = '',
        package_uninstalled = ''
      }
    }
  }
  --  はddcの方で2幅に設定済み
  require('rc.util').setcellwidths2({0xf05d, 0xf18e})
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  require('fidget').setup {
    text = {
      spinner = "dots"
    },
    timer = {
      spinner_rate = 100,
      fidget_decay = 3000,
      task_decay = 1000,
    },
    fmt = {
        stack_upwards = false
    }
  }
'''
