[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['mason.nvim', 'mason-lspconfig.nvim']
on_event = 'BufReadPost'
hook_add = '''
  autocmd BufWritePre *.ts,*.dart,*.rs lua vim.lsp.buf.formatting()
  command! Format lua vim.lsp.buf.formatting_sync()
'''
hook_source = '''
lua << EOF
  local nvim_lsp = require('lspconfig')
  local mason = require('mason')
  local mason_lspconfig = require('mason-lspconfig')
  local util = require('lspconfig.util')

  local signs = { Error = "", Warn = "", Hint = "", Info = "" }
  for type, icon in pairs(signs) do
    local hl = "DiagnosticSign" .. type
    vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
  end

  mason.setup({
    automatic_installation = true,
    ui = {
      icons = {
        package_installed = '',
        package_pending = '',
        package_uninstalled = ''
      }
    }
  })

  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  mason_lspconfig.setup_handlers({ function(server_name)
    local opts = {}
    opts.on_attach = function(_, bufnr)
      local function nnoremap(key, cmd) vim.api.nvim_buf_set_keymap(bufnr, 'n', key, cmd, { noremap = true, silent = true }) end
      nnoremap(',d', '<Cmd>lua vim.lsp.buf.definition()<CR>')
      nnoremap(',i', '<Cmd>lua vim.lsp.buf.implementation()<CR>')
      nnoremap(',r', '<Cmd>lua vim.lsp.buf.rename()<CR>')
      nnoremap(',x', '<Cmd>lua vim.diagnostic.open_float()<CR>')
      nnoremap(',l', '<Cmd>lua vim.lsp.buf.hover()<CR>')
      nnoremap(',s', '<Cmd>lua vim.lsp.buf.signature_help()<CR>')
      nnoremap(',a', '<Cmd>lua vim.lsp.buf.code_action()<CR>')
      nnoremap(',f', '<Cmd>lua vim.lsp.buf.references()<CR>')
    end
    opts.capabilities = capabilities
    if server_name == 'dartls' then
      opts.root_dir = util.root_pattern('pubspec.yaml', '.dart')
    elseif server_name == 'denols' then
      opts.init_options = { lint = true, unstable = true }
      opts.root_dir = util.root_pattern('deno.json', 'deno.jsonc', 'denops')
      opts.single_file_support = false
    elseif server_name == 'sumneko_lua' then
      opts.settings = {
        Lua = {
          runtime = { version = 'LuaJIT' },
          diagnostics = { globals = {'vim'} },
          workspace = { library = vim.api.nvim_get_runtime_file('', true) },
          telemetry = { enable = false },
        }
      }
    elseif server_name == 'tsserver' then
      opts.root_dir = util.root_pattern('package.json', 'node_modules')
    end
    nvim_lsp[server_name].setup(opts)
  end })
EOF
'''
[plugins.ftplugin]
cpp = '''
lua << EOF
  local notify = vim.notify
  vim.notify = function(msg, ...)
      if msg:match('warning: multiple different client offset_encodings') then
          return
      end
      notify(msg, ...)
  end
EOF
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
