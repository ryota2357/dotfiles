[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['SchemaStore.nvim', 'ddc-source-lsp']
on_event = 'BufReadPost'
hook_add = '''
  autocmd BufWritePre *.ts,*.dart,*.rs,*.go lua vim.lsp.buf.format()
  command! Format lua vim.lsp.buf.format()
'''
lua_source = '''
    vim.diagnostic.config({
        update_in_insert = true,
        virtual_text = {
            prefix = "▰"
        },
        signs = {
            text = {
                [vim.diagnostic.severity.ERROR] = '',
                [vim.diagnostic.severity.WARN] = '',
                [vim.diagnostic.severity.HINT] = '󰌶',
                [vim.diagnostic.severity.INFO] = '',
            }
        }
    })

    require("vimrc.autocmd") "LspAttach" {
        callback = function(context)
            local bufnr = context.buf
            -- local client = vim.lsp.get_client_by_id(context.data.client_id)
            local nmap = function(key, cmd) vim.keymap.set("n", key, cmd, { buffer = bufnr, silent = true }) end
            nmap(",d", vim.lsp.buf.definition)
            nmap(",i", vim.lsp.buf.implementation)
            nmap(",r", vim.lsp.buf.rename)
            nmap(",x", vim.diagnostic.open_float)
            nmap(",l", vim.lsp.buf.hover)
            nmap(",s", vim.lsp.buf.signature_help)
            nmap(",a", vim.lsp.buf.code_action)
            nmap(",f", vim.lsp.buf.references)
            --client.server_capabilities.semanticTokensProvider = nil
        end
    }

    local lsp_util = require("lspconfig.util")
    local root_pattern = {
        astro = lsp_util.root_pattern("astro.config.mjs", "astro.config.ts"),
        deno = lsp_util.root_pattern("deno.json", "deno.jsonc", "denops"),
        node = lsp_util.root_pattern("package.json", "node_modules")
    }

    local lsp_config = {
        astro = {
            cmd = { "astro-ls", "--stdio" },
            filetypes = { "astro", "typescript", "javascript" },
            root_dir = root_pattern.astro,
        },
        clangd = {
            cmd = { "clangd" },
            filetypes = { "c", "cpp" }
        },
        cssls = {
            cmd = { "css-ls", "--stdio" },
            filetypes = { "css", "scss" }
        },
        dartls = {
            cmd = { "dart", "language-server", "--protocol=lsp" },
            filetypes = { "dart" },
            root_pattern = { "pubspec.yaml", ".dart" }
        },
        denols = {
            cmd = { "deno", "lsp" },
            root_dir = function(filename, _bufnr)
                local is_deno = root_pattern.deno(filename)
                if is_deno then
                    return is_deno
                end
                local other = root_pattern.astro(filename) or root_pattern.node(filename)
                if other then
                    return nil
                end
                return lsp_util.root_pattern(".")(filename)
            end,
            filetypes = { "javascript", "typescript" },
            single_file_support = false,
            init_options = {
                enable = true,
                lint = true,
            },
            settings = {
                deno = {
                    unstable = true,
                    suggest = {
                        imports = {
                            hosts = {
                                ["https://deno.land"] = true,
                            }
                        }
                    }
                }
            }
        },
        dockerls = {
            cmd = { "docker-langserver", "--stdio" },
        },
        -- efm = {
        --     cmd = {  }
        --     -- init_options = { documentFormatting = true },
        --     single_file_support = true,
        --     filetypes = { "markdown" },
        --     settings = {
        --         rootMarkers = { ".git/" },
        --         languages = {
        --             markdown = { {
        --                 lintIgnoreExitCode = true,
        --                 lintCommand = [[npx textlint -f json ${INPUT} | jq -r '.[] | .filePath as $filePath | .messages[] | "1;\($filePath):\(.line):\(.column):\n2;\(.message | split("\n")[0])\n3;[\(.ruleId)]"']],
        --                 lintFormats = { "%E1;%E%f:%l:%c:", "%C2;%m", "%C3;%m%Z" },
        --                 rootMarkers = { ".textlintrc", ".textlintrc.json" },
        --             } }
        --         }
        --     }
        -- },
        gopls = {
            cmd = { "gopls" },
        },
        hls = {
            cmd = { "haskell-language-server-wrapper", "--lsp" },
            settings = {
                haskell = {
                    -- formattingProvider = "ormolu"
                }
            }
        },
        html = {
            cmd = { "html-ls", "--stdio" },
            filetypes = { "html" },
        },
        tailwindcss = {
            cmd = { "tailwindcss-language-server", "--stdio" },
            filetypes = { "astro", "css", "scss", "javascriptreact", "typescriptreact" },
            root_pattern = { "tailwind.config.js", "tailwind.config.cjs", "tailwind.config.mjs", "tailwind.config.ts" }
        },
        jsonls = {
            cmd = { "json-ls", "--stdio" },
            settings = {
                json = {
                    schemas = require("schemastore").json.schemas(),
                    validate = { enable = true },
                }
            }
        },
        lua_ls = {
            cmd = { "lua-language-server" },
            settings = {
                Lua = {
                    runtime = { version = "LuaJIT" },
                    diagnostics = { globals = { "vim" } },
                    workspace = { library = vim.api.nvim_get_runtime_file("lua", true) },
                    telemetry = { enable = false }
                }
            }
        },
        nil_ls = {
            cmd = { "nil" },
        },
        -- omnisharp = {
        --     cmd = { 'dotnet', vim.fn.stdpath('data') .. '/mason/packages/omnisharp/OmniSharp.dll' },
        --     enable_editorconfig_support = true,
        --     enable_ms_build_load_projects_on_demand = false,
        --     enable_roslyn_analyzers = true,
        --     organize_imports_on_format = false,
        --     enable_import_completion = false,
        --     sdk_include_prereleases = true,
        --     analyze_open_documents_only = false,
        --     autostart = false
        -- },
        pyright = {
            cmd = { "pyright-langserver", "--stdio" },
        },
        rust_analyzer = {
            cmd = { "rust-analyzer" },
            settings = {
                ["rust-analyzer"] = {
                    check = {
                        features = "all",
                        command = "clippy"
                    }
                }
            }
        },
        solargraph = {
            cmd = { "solargraph", "stdio" },
            single_file_support = true
        },
        taplo = {
            cmd = { "taplo", "lsp", "stdio" },
        },
        texlab = {
            cmd = { "texlab" },
            filetypes = { "tex", "plaintex" }
        },
        ts_ls = {
            cmd = { "typescript-language-server", "--stdio" },
            single_file_support = false,
            root_dir = function(fname)
                local astro_root = root_pattern.astro(fname)
                local deno_root = root_pattern.deno(fname)
                local node_root = root_pattern.node(fname)
                if deno_root ~= nil or astro_root ~= nil then
                    return nil
                end
                return node_root
            end
        },
        typst_lsp = {
            cmd = { "typst-lsp" },
            settings = {
                exportPdf = "onSave"
            }
        },
        vimls = {
            cmd = { "vim-language-server", "--stdio" },
        },
        yamlls = {
            cmd = { "yaml-ls", "--stdio" },
            settings = {
                yaml = {
                    keyOrdering = false,
                    schemaStore = {
                        enable = false,
                        url = "", -- Avoid TypeError: Cannot read properties of undefined (reading 'length')
                    },
                    schemas = require('schemastore').yaml.schemas(),
                },
            },
        }
    }

    local lsp_capabilities = require("ddc_source_lsp").make_client_capabilities()
    local nvim_lsp = require('lspconfig')
    for server_name, config in pairs(lsp_config) do
        if vim.fn.executable(config.cmd[1]) == 1 then
            config.capabilities = lsp_capabilities
            if config.root_pattern ~= nil then
                config.root_dir = lsp_util.root_pattern(unpack(config.root_pattern))
                config.root_pattern = nil
            end
            nvim_lsp[server_name].setup(config)
        else
        end
    end
'''
[plugins.ftplugin]
cpp = '''
lua << EOF
  local notify = vim.notify
  vim.notify = function(msg, ...)
    if msg:match('warning: multiple different client offset_encodings') then
      return
    end
    notify(msg, ...)
  end
EOF
'''

# [[plugins]]
# repo = 'williamboman/mason.nvim'
# on_source = 'nvim-lspconfig'
# lua_source = '''
#     require('mason').setup {
#         automatic_installation = true,
#         ui = {
#             icons = {
#                 package_installed = '',
#                 package_pending = '',
#                 package_uninstalled = ''
#             }
#         }
#     }
# '''
#
# [[plugins]]
# repo = 'williamboman/mason-lspconfig.nvim'
# on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'j-hui/fidget.nvim'
rev = 'legacy'
on_source = 'nvim-lspconfig'
lua_source = '''
    require('fidget').setup {
        text = {
            spinner = "dots"
        },
        timer = {
            spinner_rate = 100,
            fidget_decay = 3000,
            task_decay = 1000,
        },
        fmt = {
            stack_upwards = false
        }
    }
'''

[[plugins]]
repo = 'b0o/SchemaStore.nvim'
on_source = 'nvim-lspconfig'
