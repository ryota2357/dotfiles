[[plugins]]
repo = 'Shougo/ddu.vim'
rev = 'fc8d89edcc69ae2c1ac765cf3bab3b5a7bc19b7d'
depends = 'denops.vim'
on_event = 'CursorHold'
lua_add = '''
    local ddu = require('rc.ddu')
    ddu.start.keymap('n', '<Leader>f', {
        sources = { 'file_rec' },
        name = 'ff_list'
    })
    ddu.start.keymap('n', '<Leader>g', {
        sources = { 'rg' },
        name = 'ff_preview'
    })
    ddu.start.keymap('n', '<Leader>b', {
        sources = { 'buffer' },
        name = 'ff_list'
    })
    ddu.start.keymap('n', '<Leader>h', {
        sources = { 'help' },
        name = 'ff_help'
    })
    ddu.start.keymap('n', '<Leader>l', {
        sources = { 'line' },
        name = 'ff_line',
    })
    ddu.start.keymap('n', '<Leader>o', {
        ui = 'filer',
        sources = { 'file' },
        resume = true
    })
    ddu.start.command('Library', {
        sources = { 'cpl' },
        name = 'ff_list'
    })
    ddu.start.command('DeinPlugins', {
        sources = { 'dein' },
        name = 'ff_list'
    })
'''
lua_source = '''
    local ddu = require('rc.ddu')

    ddu.custom.alias('filter', 'matcher_fzf_kensaku', 'merge')
    ddu.custom.alias('filter', 'matcher_kensaku_fzf', 'merge')
    ddu.custom.alias('column', 'icon_filename_for_ff', 'icon_filename')

    ddu.custom.patch_global({
        ui = 'ff',
        uiOptions = {
            filer = { toggle = true }
        },
        uiParams = {
            ff = {
                split = 'floating',
                floatingBorder = 'rounded',
                previewFloating = true,
                previewFloatingBorder = 'rounded',
                startFilter = true,
                filterFloatingPosition = 'top'
            },
            filer = {
                split = 'vertical',
                splitDirection = 'topleft',
                winWidth = 30,
                sort = 'filename',
                sortTreesFirst = true,
                statusline = false
            }
        },
        sourceOptions = {
            _ = {
                ignoreCase = true,
                matchers = { 'matcher_fzf_kensaku' },
                sorters = { 'sorter_fzf' }
            },
            rg = {
                volatile = true,
                matchers = {},
                sorters = {}
            },
            file = {
                matchers = { 'matcher_hidden' },
                sorters = {},
                columns = { 'icon_filename' }
            },
            file_rec = {
                columns = { 'icon_filename_for_ff' }
            },
            line = {
                matchers = { 'matcher_kensaku_fzf' }
            },
            dein = {
                defaultAction = 'cd',
            }
        },
        sourceParams = {
            file_rec = {
                ignoredDirectories = { '.git', '.direnv', 'node_modules', '.next', '.cache', 'target', '.idea', '.lake', '.stack-work', '.venv', '__pycache__' }
            },
            rg = {
                args = { '--json', '--ignore-case' },
                volatile = true,
            },
            help = {
                style = 'allLang'
            }
        },
        columnParams = {
            icon_filename = {
                defaultIcon = { icon = '' },
                useLinkIcon = 'grayout'
            },
            icon_filename_for_ff = {
                defaultIcon = { icon = '' },
                padding = 0,
                pathDisplayOption = "relative"
            }
        },
        filterParams = {
            matcher_fzf = { highlightMatched = 'Search' },
            matcher_kensaku = { highlightMatched = 'Search' },
            matcher_fzf_kensaku = {
                filters = {
                    { name = 'matcher_fzf',     weight = 2.0 },
                    { name = 'matcher_kensaku', weight = 1.0 },
                }
            },
            matcher_kensaku_fzf = {
                filters = {
                    { name = 'matcher_kensaku', weight = 2.0 },
                    { name = 'matcher_fzf',     weight = 1.0 },
                }
            }
        },
        kindParams = {
            file = { trashCommand = { 'use', 'trash' } }
        },
        kindOptions = {
            file = { defaultAction = 'open' },
            help = { defaultAction = 'open' },
            action = { defaultAction = 'do' },
            cpl = { defaultAction = 'paste' },
        },
        actionOptions = {
            narrow = {
                quit = false
            }
        }
    })

    ddu.custom.patch_local('ff_list', {
        uiParams = {
            ff = {
                winRow = 'round(&lines * 0.15)',
                winCol = 'round(&columns * 0.20)',
                winHeight = 'round(&lines * 0.65)',
                winWidth = 'round(&columns * 0.60)',
                previewHeight = 0,
                previewWidth = 0
            }
        }
    })

    local p_winCol = 'round(&columns * 0.05)'
    local p_winWidth = 'round(&columns * 0.90)'
    local p_previewWidth = 'round(&columns * 0.45)'
    ddu.custom.patch_local('ff_preview', {
        uiParams = {
            ff = {
                winRow = 'round(&lines * 0.10)',
                winCol = p_winCol,
                winHeight = 'round(&lines * 0.80)',
                winWidth = p_winWidth,
                previewSplit = 'vertical',
                previewRow = 'round(&lines * 0.10)',
                previewCol = p_winCol .. '+' .. p_winWidth .. '-' .. p_previewWidth,
                previewHeight = 'round(&lines * 0.80)',
                previewWidth = p_previewWidth,
                autoAction = { name = 'preview' },
                startAutoAction = true
            }
        }
    })

    ddu.custom.patch_local('ff_line', {
        uiParams = {
            ff = {
                winRow = 'round(&lines * 0.35)',
                winCol = 'round(&columns * 0.05)',
                winHeight = 'round(&lines * 0.50)',
                winWidth = 'round(&columns * 0.90)',
                previewSplit = 'horizontal',
                previewRow = 'round(&lines * 0.35) - 3',
                previewCol = 'round(&columns * 0.05)',
                previewHeight = 'round(&lines * 0.20)',
                previewWidth = 'round(&columns * 0.90)',
                autoAction = { name = 'preview' },
                startAutoAction = true
            }
        }
    })

    local h_winCol = 'round(&columns * 0.05)'
    local h_winWidth = 'round(&columns * 0.90)'
    local h_previewWidth = 'round(&columns * 0.55)'
    ddu.custom.patch_local('ff_help', {
        uiParams = {
            ff = {
                winRow = 'round(&lines * 0.10)',
                winCol = h_winCol,
                winHeight = 'round(&lines * 0.80)',
                winWidth = h_winWidth,
                previewSplit = 'vertical',
                previewRow = 'round(&lines * 0.10)',
                previewCol = h_winCol .. '+' .. h_winWidth .. '-' .. h_previewWidth,
                previewHeight = 'round(&lines * 0.80)',
                previewWidth = h_previewWidth,
                autoAction = { name = 'preview' },
                startAutoAction = true
            }
        }
    })
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
rev = '1b397550dd154fa3f66a7654e178c654e59a21e7'
on_source = 'ddu.vim'
[plugins.ftplugin]
lua_ddu-ff = '''
    local ddu = require('rc.ddu')
    local nmap = function(lhs, rhs) vim.keymap.set('n', lhs, rhs, { buffer = true }) end
    nmap('<CR>',    function() ddu.ui.multi_actions({'clearSelectAllItems', 'itemAction'}) end)
    nmap('<ESC>',   function() ddu.ui.async_action('quit') end)
    nmap('i',       function() ddu.ui.sync_action('openFilterWindow') end)
    nmap('<Space>', function() ddu.ui.sync_action('toggleSelectItem') end)
    nmap('u',       function() ddu.ui.async_action('chooseAction') end)
    nmap('U',       function() ddu.ui.multi_actions({'clearSelectAllItems', 'toggleAllItems', 'chooseAction' }) end)
    vim.opt.signcolumn = "no"
'''
lua_ddu-ff-filter = '''
    local ddu = require('rc.ddu')
    local imap = function(lhs, rhs)
        for _, v in ipairs( type(lhs) == 'string' and { lhs } or lhs) do
            vim.keymap.set('i', v, rhs, { buffer = true })
        end
    end
    local stopinsert_then = function(func)
        vim.cmd('stopinsert')
        vim.schedule(func)
    end

    if vim.b.ddu_ui_name == 'ff_line' then
        imap('<CR>', function()
            stopinsert_then(function()
                ddu.ui.async_action('itemAction')
            end)
        end)
    elseif vim.b.ddu_ui_name == 'ff_help' then
        imap({ '<CR>', '<C-o>' }, function()
            stopinsert_then(function()
                ddu.ui.async_action('chooseAction')
            end)
        end)
    else
        imap('<CR>', function()
            stopinsert_then(function()
                ddu.ui.async_action('itemAction', {
                    params = { command = 'drop' }
                })
            end)
        end)
        imap('<C-o>', function()
            stopinsert_then(function()
                ddu.ui.async_action('itemAction', {
                    params = { command = 'tab drop' }
                })
            end)
        end)
    end
    imap('<C-i>', function()
        stopinsert_then(function()
            ddu.ui.async_action('leaveFilterWindow')
        end)
    end)
    imap('<C-u>', function()
        stopinsert_then(function()
            ddu.ui.multi_actions({
                'clearSelectAllItems', 'toggleAllItems', -- select all
                'chooseAction', 'openFilterWindow'
            })
        end)
    end)
    imap('<C-n>', function() ddu.ui.async_action('cursorNext') end)
    imap('<C-p>', function() ddu.ui.async_action('cursorPrevious') end)
    imap('<ESC>', function()
        stopinsert_then(function()
            ddu.ui.async_action('quit')
        end)
    end)
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
rev = '33051fd4775b95806cdcd5eaf96d272602f4f324'
on_source = 'ddu.vim'
[plugins.ftplugin]
lua_ddu-filer = '''
    local ddu = require('rc.ddu')
    local nmap = function(lhs, rhs) vim.keymap.set('n', lhs, rhs, { buffer = true }) end
    nmap('<CR>', function()
        if ddu.ui.get_item().isTree then
            ddu.ui.async_action('expandItem', { mode = 'toggle' })
        else
            ddu.ui.async_action('itemAction', { params = { command = 'drop' } })
        end
    end)
    nmap('o',  function() ddu.ui.async_action('itemAction', { params = { command = 'tab drop' } }) end)
    nmap('n',  function() ddu.ui.sync_action('itemAction', { name = 'newFile' }) end)
    nmap('r',  function() ddu.ui.sync_action('itemAction', { name = 'rename' }) end)
    nmap('R',  function() ddu.ui.async_action('checkItems') end)
    nmap('dd', function() ddu.ui.sync_action('itemAction', { name = 'trash' }) end)
    nmap('q',  function() ddu.ui.async_action('quit') end)
    -- nmap('.',  function()
    --     ddu.ui.async_action('updateOptions', {
    --         sourceOptions = {
    --             file = {
    --                 matchers = (function()
    --                     -- local matchers = require('rc.util').tbl_get(
    --                     --     ddu.custom.get_current(vim.b.ddu_ui_name),
    --                     --     { 'sourceOptions', 'file', 'matchers' },
    --                     --     {}
    --                     -- )
    --                     if next(matchers) == nil then
    --                         return { 'matcher_hidden' }
    --                     else
    --                         return {}
    --                     end
    --                 end)()
    --             },
    --         },
    --     })
    -- end)
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'

[[plugins]]
repo = 'ryota2357/cpl'
# repo = '~/CompetitiveProgramming/Library/cpl'
on_source = 'ddu.vim'

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Milly/ddu-filter-kensaku'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Milly/ddu-filter-merge'
on_source = 'ddu.vim'

[[plugins]]
# repo = 'ryota2357/ddu-column-icon_filename'
repo = '~/Projects/VimPlugin/ddu-column-icon_filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/cmdline.vim'
on_source = 'ddu.vim'
