[[plugins]]
repo = 'Shougo/ddu.vim'
depends = 'denops.vim'
on_event = 'CursorHold'
lua_add = '''
    local ddu = require('rc.ddu')
    local round = function(x)
        return math.floor(x + 0.5)
    end
    local create_uiParams_ff_full = function(ctx, config)
        return vim.tbl_extend('force', {
            ff = {
                winRow = round(ctx.lines * 0.2),
                winCol = round(ctx.columns * 0.15),
                winHeight = round(ctx.lines * 0.5),
                winWidth = round(ctx.columns * 0.7),
                previewHeight = round(ctx.lines * 0.15),
                previewWidth = round(ctx.columns * 0.7)
            }
        }, config or {})
    end
    local create_uiParams_ff_left = function(ctx, config)
        return vim.tbl_extend('force', {
            ff = {
                winRow = round(ctx.lines * 0.05),
                winCol = round(ctx.columns * 0.05),
                winHeight = round(ctx.lines * 0.8),
                winWidth = round(ctx.columns * 0.45),
                previewSplit = "vertical",
                previewRow = round(ctx.lines * 0.05),
                previewCol = round(ctx.columns * 0.5),
                previewHeight = round(ctx.lines * 0.8),
                previewWidth = round(ctx.columns * 0.45),
                autoAction = { name = 'preview' }
            }
        }, config or {})
    end

    ddu.start.keymap('n', '<Leader>f', 'file_rec', function(ctx)
        return {
            uiParams = create_uiParams_ff_full(ctx)
        }
    end)

    ddu.start.keymap('n', '<Leader>g', 'rg', function(ctx)
        return {
            uiParams = create_uiParams_ff_left(ctx)
        }
    end)

    ddu.start.keymap('n', '<Leader>b', 'buffer', function(ctx)
        return {
            uiParams = create_uiParams_ff_full(ctx)
        }
    end)

    ddu.start.keymap('n', '<Leader>h', 'help', function(ctx)
        return {
            uiParams = create_uiParams_ff_left(ctx, {
                winWidth = round(ctx.lines * 0.40),
                previewWidth = round(ctx.columns * 0.60)
            })
        }
    end)

    ddu.start.keymap('n', '<Leader>l', 'line', function(ctx)
        return {
            uiParams = create_uiParams_ff_full(ctx, {
                winWidth = round(ctx.lines * 0.15),
                previewWidth = round(ctx.columns * 0.60)
            })
        }
    end)

    ddu.start.keymap('n', '<Leader>o', 'file', function()
        return {
            ui = 'filer',
            resume = true
        }
    end)

    ddu.start.command('Library', 'cpl', function(ctx)
        return {
            uiParams = create_uiParams_ff_full(ctx)
        }
    end)

    ddu.start.command('DeinPlugins', 'dein', function(ctx)
        return {
            uiParams = create_uiParams_ff_full(ctx)
        }
    end)
'''
lua_source = '''
    local ddu = require('rc.ddu')

    ddu.custom.alias('filter', 'matcher_fzf_kensaku', 'merge')
    ddu.custom.alias('filter', 'matcher_kensaku_fzf', 'merge')
    ddu.custom.alias('column', 'icon_filename_for_ff', 'icon_filename')

    ddu.custom.patch_global({
        ui = 'ff',
        uiOptions = {
            filer = { toggle = true }
        },
        uiParams = {
            ff = {
                split = 'floating',
                floatingBorder = 'rounded',
                previewFloating = true,
                previewFloatingBorder = 'rounded',
                startFilter = true,
                filterFloatingPosition = 'bottom'
            },
            filer = {
                split = 'vertical',
                splitDirection = 'topleft',
                winWidth = 30,
                sort = 'filename',
                sortTreesFirst = true,
                statusline = false
            }
        },
        sourceOptions = {
            _ = {
                ignoreCase = true,
                matchers = { 'matcher_fzf_kensaku' },
                sorters = { 'sorter_fzf' }
            },
            rg = {
                volatile = true,
                matchers = {},
                sorters = {}
            },
            file = {
                matchers = { 'matcher_hidden' },
                columns = { 'icon_filename' }
            },
            file_rec = {
                columns = { 'icon_filename_for_ff' }
            },
            line = {
                matchers = { 'matcher_kensaku_fzf' }
            },
            dein = {
                defaultAction = 'cd',
            }
        },
        sourceParams = {
            file_rec = {
                ignoredDirectories = { '.git', 'node_modules', '.cache', 'target' }
            },
            rg = {
                args = { '--json', '--ignore-case' },
                volatile = true,
            },
            help = {
                style = 'allLang'
            }
        },
        columnParams = {
            icon_filename = {
                defaultIcon = { icon = '' },
                useLinkIcon = 'grayout'
            },
            icon_filename_for_ff = {
                defaultIcon = { icon = '' },
                padding = 0,
                pathDisplayOption = "relative"
            }
        },
        filterParams = {
            matcher_fzf = { highlightMatched = 'Search' },
            matcher_kensaku = { highlightMatched = 'Search' },
            matcher_fzf_kensaku = {
                filters = {
                    { name = 'matcher_fzf',     weight = 2.0 },
                    { name = 'matcher_kensaku', weight = 1.0 },
                }
            },
            matcher_kensaku_fzf = {
                filters = {
                    { name = 'matcher_kensaku', weight = 2.0 },
                    { name = 'matcher_fzf',     weight = 1.0 },
                }
            }
        },
        kindParams = {
            file = { trashCommand = { 'use', 'trash' } }
        },
        kindOptions = {
            file = { defaultAction = 'open' },
            help = { defaultAction = 'open' },
            cpl = { defaultAction = 'paste' }
        },
        actionOptions = {
            narrow = {
                quit = false
            }
        }
    })
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
[plugins.ftplugin]
lua_ddu-ff = '''
    local ddu = require('rc.ddu')
    ddu.nmap('<CR>',  function() ddu.ui.async_action('itemAction') end)
    ddu.nmap('<ESC>', function() ddu.ui.async_action('quit') end)
    ddu.nmap('i',     function() ddu.ui.sync_action('openFilterWindow') end)
    vim.opt.signcolumn = "no"
'''
lua_ddu-ff-filter = '''
    local ddu = require('rc.ddu')
    if vim.b.ddu_ui_name == 'line' then
        ddu.imap('<CR>', function()
            vim.cmd('stopinsert')
            ddu.ui.async_action('itemAction')
        end)
    else
        ddu.imap('<CR>', function()
            vim.cmd('stopinsert')
            ddu.ui.async_action('itemAction', {
                params = { command = 'drop' }
            })
        end)
        ddu.imap('<C-o>', function()
            vim.cmd('stopinsert')
            ddu.ui.async_action('itemAction', {
                params = { command = 'tab drop' }
            })
        end)
    end
    ddu.imap('<C-n>', function() ddu.ui.async_action('cursorNext') end)
    ddu.imap('<C-p>', function() ddu.ui.async_action('cursorPrevious') end)
    ddu.imap('<C-q>', function() ddu.ui.sync_action('preview') end)
    ddu.imap('<ESC>', function()
        vim.cmd('stopinsert')
        ddu.ui.async_action('quit')
    end)
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
[plugins.ftplugin]
lua_ddu-filer = '''
    local ddu = require('rc.ddu')
    ddu.nmap('<CR>', function()
        if ddu.ui.get_item().isTree then
            ddu.ui.async_action('expandItem', { mode = 'toggle' })
        else
            ddu.ui.async_action('itemAction', { params = { command = 'drop' } })
        end
    end)
    ddu.nmap('o',  function() ddu.ui.async_action('itemAction', { params = { command = 'tab drop' } }) end)
    ddu.nmap('n',  function() ddu.ui.sync_action('itemAction', { name = 'newFile' }) end)
    ddu.nmap('r',  function() ddu.ui.sync_action('itemAction', { name = 'rename' }) end)
    ddu.nmap('R',  function() ddu.ui.async_action('checkItems') end)
    ddu.nmap('dd', function() ddu.ui.sync_action('itemAction', { name = 'trash' }) end)
    ddu.nmap('q',  function() ddu.ui.async_action('quit') end)
    ddu.nmap('.',  function()
        ddu.ui.async_action('updateOptions', {
            sourceOptions = {
                file = {
                    matchers = (function()
                        local matchers = require('rc.util').tbl_get(
                            ddu.custom.get_current(vim.b.ddu_ui_name),
                            { 'sourceOptions', 'file', 'matchers' },
                            {}
                        )
                        if next(matchers) == nil then
                            return { 'matcher_hidden' }
                        else
                            return {}
                        end
                    end)()
                },
            },
        })
    end)
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'ryota2357/cpl'
# repo = '~/CompetitiveProgramming/Library/cpl'
on_source = 'ddu.vim'

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Milly/ddu-filter-kensaku'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Milly/ddu-filter-merge'
on_source = 'ddu.vim'

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
# repo = '~/Projects/VimPlugin/ddu-column-icon_filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'
