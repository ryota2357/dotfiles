[[plugins]]
repo = 'Shougo/ddu.vim'
depends = 'denops.vim'
on_event = 'CursorHold'
hook_add = '''
  nnoremap <Leader>f <Cmd>call ddu#start(#{
    \   name: 'file',
    \   sources: [#{name: 'file_rec'}],
    \   uiParams: #{
    \     ff: <SID>create_ddu_uiParams('full')
    \   }
    \ })<CR>

  nnoremap <Leader>g <Cmd>call ddu#start(#{
    \   name: 'grep',
    \   sources: [#{name: 'rg'}],
    \   uiParams: {
    \     'ff': <SID>create_ddu_uiParams('left')
    \   }
    \ })<CR>

  nnoremap <Leader>b <Cmd>call ddu#start(#{
    \   name: 'buffer',
    \   sources: [#{name: 'buffer'}],
    \   uiParams: #{
    \     ff: <SID>create_ddu_uiParams('full')
    \   }
    \ })<CR>

  nnoremap <Leader>h <Cmd>call ddu#start(#{
    \   name: 'help',
    \   sources: [#{name: 'help'}],
    \   uiParams: #{
    \     ff: <SID>create_ddu_uiParams('left', #{
    \       winWidth: round(&columns * 0.40),
    \       previewWidth: round(&columns * 0.60),
    \     })
    \   }
    \ })<CR>

  nnoremap <Leader>l <Cmd>call ddu#start(#{
    \  name: 'line',
    \  sources: [#{name: 'line'}],
    \   uiParams: #{
    \     ff: <SID>create_ddu_uiParams('full', #{
    \       winRow: round(&lines * 0.15),
    \       winHeight: round(&lines * 0.6)
    \     })
    \   }
    \ })<CR>

  nnoremap <Leader>o <Cmd>call ddu#start(#{
    \   name: 'file',
    \   sources: [#{name: 'file'}],
    \   ui: 'filer',
    \   resume: v:true
    \ })<CR>

  command! Library call ddu#start(#{
    \   name: 'library',
    \   sources: [#{name: 'cpl'}],
    \   uiParams: #{
    \     ff: <SID>create_ddu_uiParams('full')
    \   }
    \ })

  command! DeinPlugins call ddu#start(#{
    \   name: 'dein',
    \   sources: [#{name: 'dein'}],
    \   uiParams: #{
    \     ff: <SID>create_ddu_uiParams('full')
    \   }
    \ })

  function! s:create_ddu_uiParams(type, ...) abort
    if a:type ==# 'full'
      let l:ret = #{
        \   winRow: round(&lines * 0.2),
        \   winCol: round(&columns * 0.15),
        \   winHeight: round(&lines * 0.5),
        \   winWidth: round(&columns * 0.7),
        \   previewHeight: round(&lines * 0.15),
        \   previewWidth: round(&columns * 0.7)
        \ }
    elseif a:type ==# 'left'
      let l:ret = #{
        \  winRow: round(&lines * 0.05),
        \  winCol: round(&columns * 0.05),
        \  winHeight: round(&lines * 0.8),
        \  winWidth: round(&columns * 0.45),
        \  previewSplit: "vertical",
        \  previewCol: round(&columns * 0.5),
        \  previewHeight: round(&lines * 0.8),
        \  previewWidth: round(&columns * 0.45),
        \  autoAction: { 'name': 'preview' }
        \ }
    endif
    if a:0 > 0
      for [key, value] in items(a:1)
        let l:ret[key] = value
      endfor
    endif
    return l:ret
  endfunction
'''
hook_source = '''
  call ddu#custom#alias('filter', 'matcher_fzf_kensaku', 'merge')
  call ddu#custom#alias('filter', 'matcher_kensaku_fzf', 'merge')

  call ddu#custom#patch_global(#{
    \   ui: 'ff',
    \   uiOptions: #{
    \     filer: { 'toggle': v:true }
    \    },
    \   uiParams: #{
    \     ff: #{
    \       split: 'floating',
    \       floatingBorder: 'rounded',
    \       previewFloating: v:true,
    \       previewFloatingBorder: 'rounded',
    \       startFilter: v:true,
    \       replaceCol: match(getline('.')[: col('.') - 1], '\f*$') + 1
    \     },
    \     filer: #{
    \       split: 'vertical',
    \       splitDirection: 'topleft',
    \       winWidth: 30,
    \       sort: 'filename',
    \       sortTreesFirst: v:true,
    \       statusline: v:false
    \     }
    \   },
    \   sourceOptions: #{
    \     _ : #{
    \       ignoreCase: v:true,
    \       matchers: ['matcher_fzf_kensaku']
    \     },
    \     rg: #{
    \       volatile: v:true,
    \       matchers: []
    \     },
    \     file: #{
    \       matchers: ['matcher_hidden'],
    \       columns: ['icon_filename']
    \     },
    \     line: #{
    \       matchers: ['matcher_kensaku_fzf']
    \     },
    \     dein: #{
    \       defaultAction: 'cd',
    \     }
    \   },
    \   sourceParams: #{
    \     file_rec: #{
    \       ignoredDirectories: ['.git', 'node_modules', '.cache', 'target']
    \     },
    \     rg: #{
    \       args: ['--json', '--ignore-case']
    \     },
    \     help: #{
    \       style: 'allLang'
    \     }
    \   },
    \   columnParams: #{
    \     icon_filename: #{
    \       defaultIcon: #{ icon: '' },
    \       useLinkIcon: 'grayout',
    \       customFileIcons: #{
    \         tex: #{ icon: 'ﭨ' }
    \       }
    \     }
    \   },
    \   filterParams: #{
    \     matcher_fzf: #{ highlightMatched: 'Search' },
    \     matcher_kensaku: #{ highlightMatched: 'Search' },
    \     matcher_fzf_kensaku: #{
    \       filters: [
    \         #{name: 'matcher_fzf', weight: 2.0},
    \         #{name: 'matcher_kensaku', weight: 1.0},
    \       ]
    \     },
    \     matcher_kensaku_fzf: #{
    \       filters: [
    \         #{name: 'matcher_kensaku', weight: 2.0},
    \         #{name: 'matcher_fzf', weight: 1.0},
    \       ]
    \     }
    \   },
    \   kindParams: #{
    \      file: { 'trashCommand': ['use', 'trash'] }
    \   },
    \   kindOptions: #{
    \     file: #{ defaultAction: 'open' },
    \     help: #{ defaultAction: 'open' },
    \     cpl: #{ defaultAction: 'paste' }
    \   },
    \   actionOptions: #{
    \     narrow: #{
    \       quit: v:false,
    \     },
    \   }
    \ })
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-ff = '''
  nnoremap <buffer> <CR>  <Cmd>call ddu#ui#do_action('itemAction')<CR>
  nnoremap <buffer> <ESC> <Cmd>call ddu#ui#do_action('quit')<CR>
  nnoremap <buffer> i     <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
'''
ddu-ff-filter = '''
  if b:ddu_ui_name ==# 'line'
    inoremap <buffer> <CR> <Cmd>call ddu#ui#do_action('itemAction')<CR>
  else
    inoremap <buffer> <CR>  <Cmd>call ddu#ui#do_action('itemAction', { 'params': {'command': 'drop'} })<CR>
    inoremap <buffer> <C-o> <Cmd>call ddu#ui#do_action('itemAction', { 'params': {'command': 'tab drop'} })<CR>
  endif
  inoremap <buffer> <C-n> <Cmd>call ddu#ui#ff#execute("call cursor(line('.')+1, 0)<Bar>redraw")<CR>
  inoremap <buffer> <C-p> <Cmd>call ddu#ui#ff#execute("call cursor(line('.')-1, 0)<Bar>redraw")<CR>
  inoremap <buffer> <C-q> <Cmd>call ddu#ui#do_action('preview')<CR>
  inoremap <buffer> <ESC> <Cmd>call ddu#ui#do_action('quit')<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-filer = '''
  nnoremap <buffer><expr> <CR> ddu#ui#get_item()->get('isTree', v:false)
    \ ? "<Cmd>call ddu#ui#do_action('expandItem', {'mode': 'toggle'})<CR>"
    \ : "<Cmd>call ddu#ui#do_action('itemAction', { 'params': {'command': 'drop'} })<CR>"
  nnoremap <buffer> o  <Cmd>call ddu#ui#do_action('itemAction', { 'params': {'command': 'tab drop'} })<CR>
  nnoremap <buffer> n  <Cmd>call ddu#ui#do_action('itemAction', { 'name': 'newFile' })<CR>
  nnoremap <buffer> r  <Cmd>call ddu#ui#do_action('itemAction', { 'name': 'rename' })<CR>
  nnoremap <buffer> R  <Cmd>call ddu#ui#do_action('checkItems')<CR>
  nnoremap <buffer> dd <Cmd>call ddu#ui#do_action('itemAction', { 'name': 'trash' })<CR>
  nnoremap <buffer> q  <Cmd>call ddu#ui#do_action('quit')<CR>

  nnoremap <buffer> . <Cmd>call ddu#ui#filer#do_action('updateOptions', #{
    \   sourceOptions: #{
    \     file: #{
    \       matchers: ddu#custom#get_current(b:ddu_ui_name)->get('sourceOptions', {})->get('file', {})->get('matchers', [])->empty() ? ['matcher_hidden'] : [],
    \     },
    \   },
    \ })<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'

[[plugins]]
repo = 'ryota2357/cpl'
# repo = '~/CompetitiveProgramming/Library/cpl'
on_source = 'ddu.vim'

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Milly/ddu-filter-kensaku'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Milly/ddu-filter-merge'
on_source = 'ddu.vim'

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
# repo = '~/Projects/VimPlugin/ddu-column-icon_filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'
