[[plugins]]
repo = 'Shougo/ddu.vim'
depends = 'denops.vim'
on_event = 'CursorHold'
hook_add = '''
  nnoremap <silent><Leader>f <Cmd>call ddu#start({ 'sources': [{'name': 'file_rec'}] })<CR>
  nnoremap <silent><Leader>g <Cmd>call ddu#start({ 'sources': [{'name': 'rg'}], 'volatile': v:true })<CR>
  command! UpdatePlugin          :call ddu#start({ 'sources': [{'name': 'dein_update'}], 'uiParams': {'ff':{'startFilter': v:false}} })

  let g:ddu_source_option = {
    \   '_': {
    \     'ignoreCase': v:true,
    \     'matchers': ['matcher_fzf']
    \   }
    \ }
  let g:ddu_kind_option = {}
'''
hook_source = '''
  call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'uiParams': {
    \     'ff': {
    \       'split': 'floating',
    \       'floatingBorder': 'rounded',
    \       'previewFloating': v:true,
    \       'previewFloatingBorder': 'double',
    \       'startFilter': v:true
    \     }
    \   },
    \   'filterParams': {
    \     'matcher_fzf': { 'highlightMatched': 'Search' }
    \   },
    \   'actionOptions': {
    \     'echo': {
    \       'quit': v:false,
    \     },
    \     'echoDiff': {
    \       'quit': v:false,
    \     }
    \   }
    \ })
  call ddu#custom#patch_global('sourceOptions', g:ddu_source_option)
  call ddu#custom#patch_global('kindOptions', g:ddu_kind_option)

  autocmd VimResized * call s:DduUiFfWindosSizeParams()
  function! s:DduUiFfWindosSizeParams() abort
    call ddu#custom#patch_global('uiParams', {
      \   'ff': {
      \     'winRow': round(&lines * 0.2),
      \     'winCol': round(&columns * 0.1),
      \     'winHeight': round(&lines * 0.5),
      \     'winWidth': round(&columns * 0.8),
      \     'previewRow': round(&lines * 0.6),
      \     'previewCol': round(&columns * 0.5),
      \     'previewHeight': round(&lines * 0.4),
      \     'previewWidth': round(&columns * 0.45),
      \   }
      \ })
  endfunction
  call s:DduUiFfWindosSizeParams()
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-ff = '''
  inoremap <buffer><CR>  <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><ESC> <Cmd>call ddu#ui#ff#do_action('quit')<CR>
'''
ddu-ff-filter = '''
  inoremap <buffer><CR>  <Cmd>call ddu#ui#ff#do_action('itemAction', { 'params': {'command': 'drop'} })<CR>
  inoremap <buffer><C-o> <Cmd>call ddu#ui#ff#do_action('itemAction', { 'params': {'command': 'tab drop'} })<CR>
  inoremap <buffer><C-n> <Cmd>call ddu#ui#ff#execute("call cursor(line('.')+1,0)")<CR>
  inoremap <buffer><C-p> <Cmd>call ddu#ui#ff#execute("call cursor(line('.')-1,0)")<CR>
  inoremap <buffer><C-q> <Cmd>call ddu#ui#ff#do_action('preview')<CR>
  inoremap <buffer><ESC> <Cmd>call ddu#ui#ff#do_action('quit')<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
depends = 'ddu-kind-file'
on_source = 'ddu.vim'
hook_source = '''
  let g:ddu_source_option['rg'] = { 'matchers': [] }
'''

[[plugins]]
repo = 'matsui54/ddu-source-dein_update'
on_source = 'ddu.vim'
hook_source = '''
  let g:ddu_source_option['dein_update'] = { 'matchers': ['matcher_dein_update'] }
  let g:ddu_kind_option['dein_update'] = { 'defaultAction': 'viewDiff' }
'''

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'
hook_source = '''
  let g:ddu_kind_option['file'] = { 'defaultAction': 'open' }
'''
